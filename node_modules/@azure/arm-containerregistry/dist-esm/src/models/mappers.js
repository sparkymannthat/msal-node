/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const ImportImageParameters = {
    type: {
        name: "Composite",
        className: "ImportImageParameters",
        modelProperties: {
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "ImportSource"
                }
            },
            targetTags: {
                serializedName: "targetTags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            untaggedTargetRepositories: {
                serializedName: "untaggedTargetRepositories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            mode: {
                defaultValue: "NoForce",
                serializedName: "mode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ImportSource = {
    type: {
        name: "Composite",
        className: "ImportSource",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String"
                }
            },
            registryUri: {
                serializedName: "registryUri",
                type: {
                    name: "String"
                }
            },
            credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "ImportSourceCredentials"
                }
            },
            sourceImage: {
                serializedName: "sourceImage",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ImportSourceCredentials = {
    type: {
        name: "Composite",
        className: "ImportSourceCredentials",
        modelProperties: {
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            password: {
                serializedName: "password",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationListResult = {
    type: {
        name: "Composite",
        className: "OperationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationDefinition"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationDefinition = {
    type: {
        name: "Composite",
        className: "OperationDefinition",
        modelProperties: {
            origin: {
                serializedName: "origin",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplayDefinition"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "OperationServiceSpecificationDefinition"
                }
            }
        }
    }
};
export const OperationDisplayDefinition = {
    type: {
        name: "Composite",
        className: "OperationDisplayDefinition",
        modelProperties: {
            provider: {
                serializedName: "provider",
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationServiceSpecificationDefinition = {
    type: {
        name: "Composite",
        className: "OperationServiceSpecificationDefinition",
        modelProperties: {
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationMetricSpecificationDefinition"
                        }
                    }
                }
            },
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OperationLogSpecificationDefinition"
                        }
                    }
                }
            }
        }
    }
};
export const OperationMetricSpecificationDefinition = {
    type: {
        name: "Composite",
        className: "OperationMetricSpecificationDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            internalMetricName: {
                serializedName: "internalMetricName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationLogSpecificationDefinition = {
    type: {
        name: "Composite",
        className: "OperationLogSpecificationDefinition",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RegistryNameCheckRequest = {
    type: {
        name: "Composite",
        className: "RegistryNameCheckRequest",
        modelProperties: {
            name: {
                constraints: {
                    Pattern: new RegExp("^[a-zA-Z0-9]*$"),
                    MaxLength: 50,
                    MinLength: 5
                },
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                defaultValue: "Microsoft.ContainerRegistry/registries",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RegistryNameStatus = {
    type: {
        name: "Composite",
        className: "RegistryNameStatus",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateEndpointConnectionListResult = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnectionListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
export const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const RegistryListResult = {
    type: {
        name: "Composite",
        className: "RegistryListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Registry"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "tier",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IdentityProperties = {
    type: {
        name: "Composite",
        className: "IdentityProperties",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "SystemAssigned",
                        "UserAssigned",
                        "SystemAssigned, UserAssigned",
                        "None"
                    ]
                }
            },
            userAssignedIdentities: {
                serializedName: "userAssignedIdentities",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "UserIdentityProperties" }
                    }
                }
            }
        }
    }
};
export const UserIdentityProperties = {
    type: {
        name: "Composite",
        className: "UserIdentityProperties",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String"
                }
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Status = {
    type: {
        name: "Composite",
        className: "Status",
        modelProperties: {
            displayStatus: {
                serializedName: "displayStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const NetworkRuleSet = {
    type: {
        name: "Composite",
        className: "NetworkRuleSet",
        modelProperties: {
            defaultAction: {
                defaultValue: "Allow",
                serializedName: "defaultAction",
                required: true,
                type: {
                    name: "String"
                }
            },
            ipRules: {
                serializedName: "ipRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IPRule"
                        }
                    }
                }
            }
        }
    }
};
export const IPRule = {
    type: {
        name: "Composite",
        className: "IPRule",
        modelProperties: {
            action: {
                defaultValue: "Allow",
                serializedName: "action",
                type: {
                    name: "String"
                }
            },
            iPAddressOrRange: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Policies = {
    type: {
        name: "Composite",
        className: "Policies",
        modelProperties: {
            quarantinePolicy: {
                serializedName: "quarantinePolicy",
                type: {
                    name: "Composite",
                    className: "QuarantinePolicy"
                }
            },
            trustPolicy: {
                serializedName: "trustPolicy",
                type: {
                    name: "Composite",
                    className: "TrustPolicy"
                }
            },
            retentionPolicy: {
                serializedName: "retentionPolicy",
                type: {
                    name: "Composite",
                    className: "RetentionPolicy"
                }
            },
            exportPolicy: {
                serializedName: "exportPolicy",
                type: {
                    name: "Composite",
                    className: "ExportPolicy"
                }
            }
        }
    }
};
export const QuarantinePolicy = {
    type: {
        name: "Composite",
        className: "QuarantinePolicy",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TrustPolicy = {
    type: {
        name: "Composite",
        className: "TrustPolicy",
        modelProperties: {
            type: {
                defaultValue: "Notary",
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RetentionPolicy = {
    type: {
        name: "Composite",
        className: "RetentionPolicy",
        modelProperties: {
            days: {
                defaultValue: 7,
                serializedName: "days",
                type: {
                    name: "Number"
                }
            },
            lastUpdatedTime: {
                serializedName: "lastUpdatedTime",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ExportPolicy = {
    type: {
        name: "Composite",
        className: "ExportPolicy",
        modelProperties: {
            status: {
                defaultValue: "enabled",
                serializedName: "status",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EncryptionProperty = {
    type: {
        name: "Composite",
        className: "EncryptionProperty",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            keyVaultProperties: {
                serializedName: "keyVaultProperties",
                type: {
                    name: "Composite",
                    className: "KeyVaultProperties"
                }
            }
        }
    }
};
export const KeyVaultProperties = {
    type: {
        name: "Composite",
        className: "KeyVaultProperties",
        modelProperties: {
            keyIdentifier: {
                serializedName: "keyIdentifier",
                type: {
                    name: "String"
                }
            },
            versionedKeyIdentifier: {
                serializedName: "versionedKeyIdentifier",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "String"
                }
            },
            keyRotationEnabled: {
                serializedName: "keyRotationEnabled",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            lastKeyRotationTimestamp: {
                serializedName: "lastKeyRotationTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
export const RegistryUpdateParameters = {
    type: {
        name: "Composite",
        className: "RegistryUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            },
            adminUserEnabled: {
                serializedName: "properties.adminUserEnabled",
                type: {
                    name: "Boolean"
                }
            },
            networkRuleSet: {
                serializedName: "properties.networkRuleSet",
                type: {
                    name: "Composite",
                    className: "NetworkRuleSet"
                }
            },
            policies: {
                serializedName: "properties.policies",
                type: {
                    name: "Composite",
                    className: "Policies"
                }
            },
            encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "EncryptionProperty"
                }
            },
            dataEndpointEnabled: {
                serializedName: "properties.dataEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            },
            publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            },
            networkRuleBypassOptions: {
                serializedName: "properties.networkRuleBypassOptions",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RegistryUsageListResult = {
    type: {
        name: "Composite",
        className: "RegistryUsageListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegistryUsage"
                        }
                    }
                }
            }
        }
    }
};
export const RegistryUsage = {
    type: {
        name: "Composite",
        className: "RegistryUsage",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "Number"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                type: {
                    name: "Number"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkResourceListResult = {
    type: {
        name: "Composite",
        className: "PrivateLinkResourceListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateLinkResource"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateLinkResource = {
    type: {
        name: "Composite",
        className: "PrivateLinkResource",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            groupId: {
                serializedName: "properties.groupId",
                type: {
                    name: "String"
                }
            },
            requiredMembers: {
                serializedName: "properties.requiredMembers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            requiredZoneNames: {
                serializedName: "properties.requiredZoneNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponseBody"
                }
            }
        }
    }
};
export const ErrorResponseBody = {
    type: {
        name: "Composite",
        className: "ErrorResponseBody",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "InnerErrorDescription"
                        }
                    }
                }
            }
        }
    }
};
export const InnerErrorDescription = {
    type: {
        name: "Composite",
        className: "InnerErrorDescription",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RegistryListCredentialsResult = {
    type: {
        name: "Composite",
        className: "RegistryListCredentialsResult",
        modelProperties: {
            username: {
                serializedName: "username",
                type: {
                    name: "String"
                }
            },
            passwords: {
                serializedName: "passwords",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RegistryPassword"
                        }
                    }
                }
            }
        }
    }
};
export const RegistryPassword = {
    type: {
        name: "Composite",
        className: "RegistryPassword",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "Enum",
                    allowedValues: ["password", "password2"]
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RegenerateCredentialParameters = {
    type: {
        name: "Composite",
        className: "RegenerateCredentialParameters",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["password", "password2"]
                }
            }
        }
    }
};
export const ReplicationListResult = {
    type: {
        name: "Composite",
        className: "ReplicationListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Replication"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ReplicationUpdateParameters = {
    type: {
        name: "Composite",
        className: "ReplicationUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            regionEndpointEnabled: {
                serializedName: "properties.regionEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const WebhookListResult = {
    type: {
        name: "Composite",
        className: "WebhookListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Webhook"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const WebhookCreateParameters = {
    type: {
        name: "Composite",
        className: "WebhookCreateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            serviceUri: {
                serializedName: "properties.serviceUri",
                type: {
                    name: "String"
                }
            },
            customHeaders: {
                serializedName: "properties.customHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const WebhookUpdateParameters = {
    type: {
        name: "Composite",
        className: "WebhookUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            serviceUri: {
                serializedName: "properties.serviceUri",
                type: {
                    name: "String"
                }
            },
            customHeaders: {
                serializedName: "properties.customHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            },
            actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const EventInfo = {
    type: {
        name: "Composite",
        className: "EventInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EventListResult = {
    type: {
        name: "Composite",
        className: "EventListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Event"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EventRequestMessage = {
    type: {
        name: "Composite",
        className: "EventRequestMessage",
        modelProperties: {
            content: {
                serializedName: "content",
                type: {
                    name: "Composite",
                    className: "EventContent"
                }
            },
            headers: {
                serializedName: "headers",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            },
            requestUri: {
                serializedName: "requestUri",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EventContent = {
    type: {
        name: "Composite",
        className: "EventContent",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "Composite",
                    className: "Target"
                }
            },
            request: {
                serializedName: "request",
                type: {
                    name: "Composite",
                    className: "Request"
                }
            },
            actor: {
                serializedName: "actor",
                type: {
                    name: "Composite",
                    className: "Actor"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "Source"
                }
            }
        }
    }
};
export const Target = {
    type: {
        name: "Composite",
        className: "Target",
        modelProperties: {
            mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "Number"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            },
            length: {
                serializedName: "length",
                type: {
                    name: "Number"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Request = {
    type: {
        name: "Composite",
        className: "Request",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            addr: {
                serializedName: "addr",
                type: {
                    name: "String"
                }
            },
            host: {
                serializedName: "host",
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                type: {
                    name: "String"
                }
            },
            useragent: {
                serializedName: "useragent",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Actor = {
    type: {
        name: "Composite",
        className: "Actor",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Source = {
    type: {
        name: "Composite",
        className: "Source",
        modelProperties: {
            addr: {
                serializedName: "addr",
                type: {
                    name: "String"
                }
            },
            instanceID: {
                serializedName: "instanceID",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EventResponseMessage = {
    type: {
        name: "Composite",
        className: "EventResponseMessage",
        modelProperties: {
            content: {
                serializedName: "content",
                type: {
                    name: "String"
                }
            },
            headers: {
                serializedName: "headers",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            reasonPhrase: {
                serializedName: "reasonPhrase",
                type: {
                    name: "String"
                }
            },
            statusCode: {
                serializedName: "statusCode",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CallbackConfig = {
    type: {
        name: "Composite",
        className: "CallbackConfig",
        modelProperties: {
            serviceUri: {
                serializedName: "serviceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            customHeaders: {
                serializedName: "customHeaders",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
export const AgentPoolUpdateParameters = {
    type: {
        name: "Composite",
        className: "AgentPoolUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            count: {
                serializedName: "properties.count",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const AgentPoolListResult = {
    type: {
        name: "Composite",
        className: "AgentPoolListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AgentPool"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AgentPoolQueueStatus = {
    type: {
        name: "Composite",
        className: "AgentPoolQueueStatus",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const RunRequest = {
    type: {
        name: "Composite",
        className: "RunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            isArchiveEnabled: {
                defaultValue: false,
                serializedName: "isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            },
            agentPoolName: {
                serializedName: "agentPoolName",
                type: {
                    name: "String"
                }
            },
            logTemplate: {
                serializedName: "logTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ImageDescriptor = {
    type: {
        name: "Composite",
        className: "ImageDescriptor",
        modelProperties: {
            registry: {
                serializedName: "registry",
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ImageUpdateTrigger = {
    type: {
        name: "Composite",
        className: "ImageUpdateTrigger",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                type: {
                    name: "DateTime"
                }
            },
            images: {
                serializedName: "images",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageDescriptor"
                        }
                    }
                }
            }
        }
    }
};
export const SourceTriggerDescriptor = {
    type: {
        name: "Composite",
        className: "SourceTriggerDescriptor",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            eventType: {
                serializedName: "eventType",
                type: {
                    name: "String"
                }
            },
            commitId: {
                serializedName: "commitId",
                type: {
                    name: "String"
                }
            },
            pullRequestId: {
                serializedName: "pullRequestId",
                type: {
                    name: "String"
                }
            },
            repositoryUrl: {
                serializedName: "repositoryUrl",
                type: {
                    name: "String"
                }
            },
            branchName: {
                serializedName: "branchName",
                type: {
                    name: "String"
                }
            },
            providerType: {
                serializedName: "providerType",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TimerTriggerDescriptor = {
    type: {
        name: "Composite",
        className: "TimerTriggerDescriptor",
        modelProperties: {
            timerTriggerName: {
                serializedName: "timerTriggerName",
                type: {
                    name: "String"
                }
            },
            scheduleOccurrence: {
                serializedName: "scheduleOccurrence",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PlatformProperties = {
    type: {
        name: "Composite",
        className: "PlatformProperties",
        modelProperties: {
            os: {
                serializedName: "os",
                required: true,
                type: {
                    name: "String"
                }
            },
            architecture: {
                serializedName: "architecture",
                type: {
                    name: "String"
                }
            },
            variant: {
                serializedName: "variant",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AgentProperties = {
    type: {
        name: "Composite",
        className: "AgentProperties",
        modelProperties: {
            cpu: {
                serializedName: "cpu",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const SourceUploadDefinition = {
    type: {
        name: "Composite",
        className: "SourceUploadDefinition",
        modelProperties: {
            uploadUrl: {
                serializedName: "uploadUrl",
                type: {
                    name: "String"
                }
            },
            relativePath: {
                serializedName: "relativePath",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RunListResult = {
    type: {
        name: "Composite",
        className: "RunListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Run"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RunUpdateParameters = {
    type: {
        name: "Composite",
        className: "RunUpdateParameters",
        modelProperties: {
            isArchiveEnabled: {
                serializedName: "isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const RunGetLogResult = {
    type: {
        name: "Composite",
        className: "RunGetLogResult",
        modelProperties: {
            logLink: {
                serializedName: "logLink",
                type: {
                    name: "String"
                }
            },
            logArtifactLink: {
                serializedName: "logArtifactLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TaskRunUpdateParameters = {
    type: {
        name: "Composite",
        className: "TaskRunUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            runRequest: {
                serializedName: "properties.runRequest",
                type: {
                    name: "Composite",
                    className: "RunRequest"
                }
            },
            forceUpdateTag: {
                serializedName: "properties.forceUpdateTag",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TaskRunListResult = {
    type: {
        name: "Composite",
        className: "TaskRunListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TaskRun"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TaskListResult = {
    type: {
        name: "Composite",
        className: "TaskListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Task"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TaskStepProperties = {
    type: {
        name: "Composite",
        className: "TaskStepProperties",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            baseImageDependencies: {
                serializedName: "baseImageDependencies",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BaseImageDependency"
                        }
                    }
                }
            },
            contextPath: {
                serializedName: "contextPath",
                type: {
                    name: "String"
                }
            },
            contextAccessToken: {
                serializedName: "contextAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const BaseImageDependency = {
    type: {
        name: "Composite",
        className: "BaseImageDependency",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            registry: {
                serializedName: "registry",
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerProperties = {
    type: {
        name: "Composite",
        className: "TriggerProperties",
        modelProperties: {
            timerTriggers: {
                serializedName: "timerTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimerTrigger"
                        }
                    }
                }
            },
            sourceTriggers: {
                serializedName: "sourceTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SourceTrigger"
                        }
                    }
                }
            },
            baseImageTrigger: {
                serializedName: "baseImageTrigger",
                type: {
                    name: "Composite",
                    className: "BaseImageTrigger"
                }
            }
        }
    }
};
export const TimerTrigger = {
    type: {
        name: "Composite",
        className: "TimerTrigger",
        modelProperties: {
            schedule: {
                serializedName: "schedule",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SourceTrigger = {
    type: {
        name: "Composite",
        className: "SourceTrigger",
        modelProperties: {
            sourceRepository: {
                serializedName: "sourceRepository",
                type: {
                    name: "Composite",
                    className: "SourceProperties"
                }
            },
            sourceTriggerEvents: {
                serializedName: "sourceTriggerEvents",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SourceProperties = {
    type: {
        name: "Composite",
        className: "SourceProperties",
        modelProperties: {
            sourceControlType: {
                serializedName: "sourceControlType",
                required: true,
                type: {
                    name: "String"
                }
            },
            repositoryUrl: {
                serializedName: "repositoryUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            branch: {
                serializedName: "branch",
                type: {
                    name: "String"
                }
            },
            sourceControlAuthProperties: {
                serializedName: "sourceControlAuthProperties",
                type: {
                    name: "Composite",
                    className: "AuthInfo"
                }
            }
        }
    }
};
export const AuthInfo = {
    type: {
        name: "Composite",
        className: "AuthInfo",
        modelProperties: {
            tokenType: {
                serializedName: "tokenType",
                required: true,
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                required: true,
                type: {
                    name: "String"
                }
            },
            refreshToken: {
                serializedName: "refreshToken",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            expiresIn: {
                serializedName: "expiresIn",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const BaseImageTrigger = {
    type: {
        name: "Composite",
        className: "BaseImageTrigger",
        modelProperties: {
            baseImageTriggerType: {
                serializedName: "baseImageTriggerType",
                required: true,
                type: {
                    name: "String"
                }
            },
            updateTriggerEndpoint: {
                serializedName: "updateTriggerEndpoint",
                type: {
                    name: "String"
                }
            },
            updateTriggerPayloadType: {
                serializedName: "updateTriggerPayloadType",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Credentials = {
    type: {
        name: "Composite",
        className: "Credentials",
        modelProperties: {
            sourceRegistry: {
                serializedName: "sourceRegistry",
                type: {
                    name: "Composite",
                    className: "SourceRegistryCredentials"
                }
            },
            customRegistries: {
                serializedName: "customRegistries",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "CustomRegistryCredentials" }
                    }
                }
            }
        }
    }
};
export const SourceRegistryCredentials = {
    type: {
        name: "Composite",
        className: "SourceRegistryCredentials",
        modelProperties: {
            loginMode: {
                serializedName: "loginMode",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CustomRegistryCredentials = {
    type: {
        name: "Composite",
        className: "CustomRegistryCredentials",
        modelProperties: {
            userName: {
                serializedName: "userName",
                type: {
                    name: "Composite",
                    className: "SecretObject"
                }
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretObject"
                }
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SecretObject = {
    type: {
        name: "Composite",
        className: "SecretObject",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TaskUpdateParameters = {
    type: {
        name: "Composite",
        className: "TaskUpdateParameters",
        modelProperties: {
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            },
            platform: {
                serializedName: "properties.platform",
                type: {
                    name: "Composite",
                    className: "PlatformUpdateParameters"
                }
            },
            agentConfiguration: {
                serializedName: "properties.agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            },
            agentPoolName: {
                serializedName: "properties.agentPoolName",
                type: {
                    name: "String"
                }
            },
            timeout: {
                serializedName: "properties.timeout",
                type: {
                    name: "Number"
                }
            },
            step: {
                serializedName: "properties.step",
                type: {
                    name: "Composite",
                    className: "TaskStepUpdateParameters"
                }
            },
            trigger: {
                serializedName: "properties.trigger",
                type: {
                    name: "Composite",
                    className: "TriggerUpdateParameters"
                }
            },
            credentials: {
                serializedName: "properties.credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            },
            logTemplate: {
                serializedName: "properties.logTemplate",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PlatformUpdateParameters = {
    type: {
        name: "Composite",
        className: "PlatformUpdateParameters",
        modelProperties: {
            os: {
                serializedName: "os",
                type: {
                    name: "String"
                }
            },
            architecture: {
                serializedName: "architecture",
                type: {
                    name: "String"
                }
            },
            variant: {
                serializedName: "variant",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TaskStepUpdateParameters = {
    type: {
        name: "Composite",
        className: "TaskStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            contextPath: {
                serializedName: "contextPath",
                type: {
                    name: "String"
                }
            },
            contextAccessToken: {
                serializedName: "contextAccessToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "TriggerUpdateParameters",
        modelProperties: {
            timerTriggers: {
                serializedName: "timerTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TimerTriggerUpdateParameters"
                        }
                    }
                }
            },
            sourceTriggers: {
                serializedName: "sourceTriggers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SourceTriggerUpdateParameters"
                        }
                    }
                }
            },
            baseImageTrigger: {
                serializedName: "baseImageTrigger",
                type: {
                    name: "Composite",
                    className: "BaseImageTriggerUpdateParameters"
                }
            }
        }
    }
};
export const TimerTriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "TimerTriggerUpdateParameters",
        modelProperties: {
            schedule: {
                serializedName: "schedule",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SourceTriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "SourceTriggerUpdateParameters",
        modelProperties: {
            sourceRepository: {
                serializedName: "sourceRepository",
                type: {
                    name: "Composite",
                    className: "SourceUpdateParameters"
                }
            },
            sourceTriggerEvents: {
                serializedName: "sourceTriggerEvents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SourceUpdateParameters = {
    type: {
        name: "Composite",
        className: "SourceUpdateParameters",
        modelProperties: {
            sourceControlType: {
                serializedName: "sourceControlType",
                type: {
                    name: "String"
                }
            },
            repositoryUrl: {
                serializedName: "repositoryUrl",
                type: {
                    name: "String"
                }
            },
            branch: {
                serializedName: "branch",
                type: {
                    name: "String"
                }
            },
            sourceControlAuthProperties: {
                serializedName: "sourceControlAuthProperties",
                type: {
                    name: "Composite",
                    className: "AuthInfoUpdateParameters"
                }
            }
        }
    }
};
export const AuthInfoUpdateParameters = {
    type: {
        name: "Composite",
        className: "AuthInfoUpdateParameters",
        modelProperties: {
            tokenType: {
                serializedName: "tokenType",
                type: {
                    name: "String"
                }
            },
            token: {
                serializedName: "token",
                type: {
                    name: "String"
                }
            },
            refreshToken: {
                serializedName: "refreshToken",
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                type: {
                    name: "String"
                }
            },
            expiresIn: {
                serializedName: "expiresIn",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const BaseImageTriggerUpdateParameters = {
    type: {
        name: "Composite",
        className: "BaseImageTriggerUpdateParameters",
        modelProperties: {
            baseImageTriggerType: {
                serializedName: "baseImageTriggerType",
                type: {
                    name: "String"
                }
            },
            updateTriggerEndpoint: {
                serializedName: "updateTriggerEndpoint",
                type: {
                    name: "String"
                }
            },
            updateTriggerPayloadType: {
                serializedName: "updateTriggerPayloadType",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const StorageAccountProperties = {
    type: {
        name: "Composite",
        className: "StorageAccountProperties",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PackageType = {
    type: {
        name: "Composite",
        className: "PackageType",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            endpoint: {
                serializedName: "endpoint",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RunFilter = {
    type: {
        name: "Composite",
        className: "RunFilter",
        modelProperties: {
            runId: {
                serializedName: "runId",
                type: {
                    name: "String"
                }
            },
            runType: {
                serializedName: "runType",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            createTime: {
                serializedName: "createTime",
                type: {
                    name: "DateTime"
                }
            },
            finishTime: {
                serializedName: "finishTime",
                type: {
                    name: "DateTime"
                }
            },
            outputImageManifests: {
                serializedName: "outputImageManifests",
                type: {
                    name: "String"
                }
            },
            isArchiveEnabled: {
                serializedName: "isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            },
            taskName: {
                serializedName: "taskName",
                type: {
                    name: "String"
                }
            },
            agentPoolName: {
                serializedName: "agentPoolName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Argument = {
    type: {
        name: "Composite",
        className: "Argument",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            },
            isSecret: {
                defaultValue: false,
                serializedName: "isSecret",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const SetValue = {
    type: {
        name: "Composite",
        className: "SetValue",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            },
            isSecret: {
                defaultValue: false,
                serializedName: "isSecret",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const OverrideTaskStepProperties = {
    type: {
        name: "Composite",
        className: "OverrideTaskStepProperties",
        modelProperties: {
            contextPath: {
                serializedName: "contextPath",
                type: {
                    name: "String"
                }
            },
            file: {
                serializedName: "file",
                type: {
                    name: "String"
                }
            },
            arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            },
            values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            },
            updateTriggerToken: {
                serializedName: "updateTriggerToken",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint"
                }
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const Run = {
    type: {
        name: "Composite",
        className: "Run",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { runId: {
                serializedName: "properties.runId",
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, lastUpdatedTime: {
                serializedName: "properties.lastUpdatedTime",
                type: {
                    name: "DateTime"
                }
            }, runType: {
                serializedName: "properties.runType",
                type: {
                    name: "String"
                }
            }, agentPoolName: {
                serializedName: "properties.agentPoolName",
                type: {
                    name: "String"
                }
            }, createTime: {
                serializedName: "properties.createTime",
                type: {
                    name: "DateTime"
                }
            }, startTime: {
                serializedName: "properties.startTime",
                type: {
                    name: "DateTime"
                }
            }, finishTime: {
                serializedName: "properties.finishTime",
                type: {
                    name: "DateTime"
                }
            }, outputImages: {
                serializedName: "properties.outputImages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageDescriptor"
                        }
                    }
                }
            }, task: {
                serializedName: "properties.task",
                type: {
                    name: "String"
                }
            }, imageUpdateTrigger: {
                serializedName: "properties.imageUpdateTrigger",
                type: {
                    name: "Composite",
                    className: "ImageUpdateTrigger"
                }
            }, sourceTrigger: {
                serializedName: "properties.sourceTrigger",
                type: {
                    name: "Composite",
                    className: "SourceTriggerDescriptor"
                }
            }, timerTrigger: {
                serializedName: "properties.timerTrigger",
                type: {
                    name: "Composite",
                    className: "TimerTriggerDescriptor"
                }
            }, platform: {
                serializedName: "properties.platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "properties.agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceRegistryAuth: {
                serializedName: "properties.sourceRegistryAuth",
                type: {
                    name: "String"
                }
            }, customRegistries: {
                serializedName: "properties.customRegistries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, runErrorMessage: {
                serializedName: "properties.runErrorMessage",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, updateTriggerToken: {
                serializedName: "properties.updateTriggerToken",
                type: {
                    name: "String"
                }
            }, logArtifact: {
                serializedName: "properties.logArtifact",
                type: {
                    name: "Composite",
                    className: "ImageDescriptor"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String"
                }
            }, isArchiveEnabled: {
                defaultValue: false,
                serializedName: "properties.isArchiveEnabled",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const TaskRun = {
    type: {
        name: "Composite",
        className: "TaskRun",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            }, location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, runRequest: {
                serializedName: "properties.runRequest",
                type: {
                    name: "Composite",
                    className: "RunRequest"
                }
            }, runResult: {
                serializedName: "properties.runResult",
                type: {
                    name: "Composite",
                    className: "Run"
                }
            }, forceUpdateTag: {
                serializedName: "properties.forceUpdateTag",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Registry = {
    type: {
        name: "Composite",
        className: "Registry",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            }, loginServer: {
                serializedName: "properties.loginServer",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationDate: {
                serializedName: "properties.creationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "Status"
                }
            }, adminUserEnabled: {
                defaultValue: false,
                serializedName: "properties.adminUserEnabled",
                type: {
                    name: "Boolean"
                }
            }, networkRuleSet: {
                serializedName: "properties.networkRuleSet",
                type: {
                    name: "Composite",
                    className: "NetworkRuleSet"
                }
            }, policies: {
                serializedName: "properties.policies",
                type: {
                    name: "Composite",
                    className: "Policies"
                }
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "EncryptionProperty"
                }
            }, dataEndpointEnabled: {
                serializedName: "properties.dataEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            }, dataEndpointHostNames: {
                serializedName: "properties.dataEndpointHostNames",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection"
                        }
                    }
                }
            }, publicNetworkAccess: {
                serializedName: "properties.publicNetworkAccess",
                type: {
                    name: "String"
                }
            }, networkRuleBypassOptions: {
                serializedName: "properties.networkRuleBypassOptions",
                type: {
                    name: "String"
                }
            }, zoneRedundancy: {
                serializedName: "properties.zoneRedundancy",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Replication = {
    type: {
        name: "Composite",
        className: "Replication",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "Composite",
                    className: "Status"
                }
            }, regionEndpointEnabled: {
                defaultValue: true,
                serializedName: "properties.regionEndpointEnabled",
                type: {
                    name: "Boolean"
                }
            }, zoneRedundancy: {
                serializedName: "properties.zoneRedundancy",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Webhook = {
    type: {
        name: "Composite",
        className: "Webhook",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, scope: {
                serializedName: "properties.scope",
                type: {
                    name: "String"
                }
            }, actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AgentPool = {
    type: {
        name: "Composite",
        className: "AgentPool",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { count: {
                serializedName: "properties.count",
                type: {
                    name: "Number"
                }
            }, tier: {
                serializedName: "properties.tier",
                type: {
                    name: "String"
                }
            }, os: {
                serializedName: "properties.os",
                type: {
                    name: "String"
                }
            }, virtualNetworkSubnetResourceId: {
                serializedName: "properties.virtualNetworkSubnetResourceId",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const Task = {
    type: {
        name: "Composite",
        className: "Task",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "IdentityProperties"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, creationDate: {
                serializedName: "properties.creationDate",
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String"
                }
            }, platform: {
                serializedName: "properties.platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "properties.agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, agentPoolName: {
                serializedName: "properties.agentPoolName",
                type: {
                    name: "String"
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "properties.timeout",
                type: {
                    name: "Number"
                }
            }, step: {
                serializedName: "properties.step",
                type: {
                    name: "Composite",
                    className: "TaskStepProperties"
                }
            }, trigger: {
                serializedName: "properties.trigger",
                type: {
                    name: "Composite",
                    className: "TriggerProperties"
                }
            }, credentials: {
                serializedName: "properties.credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            }, logTemplate: {
                serializedName: "properties.logTemplate",
                type: {
                    name: "String"
                }
            }, isSystemTask: {
                defaultValue: false,
                serializedName: "properties.isSystemTask",
                type: {
                    name: "Boolean"
                }
            } })
    }
};
export const Event = {
    type: {
        name: "Composite",
        className: "Event",
        modelProperties: Object.assign(Object.assign({}, EventInfo.type.modelProperties), { eventRequestMessage: {
                serializedName: "eventRequestMessage",
                type: {
                    name: "Composite",
                    className: "EventRequestMessage"
                }
            }, eventResponseMessage: {
                serializedName: "eventResponseMessage",
                type: {
                    name: "Composite",
                    className: "EventResponseMessage"
                }
            } })
    }
};
export const DockerBuildRequest = {
    serializedName: "DockerBuildRequest",
    type: {
        name: "Composite",
        className: "DockerBuildRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { imageNames: {
                serializedName: "imageNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, isPushEnabled: {
                defaultValue: true,
                serializedName: "isPushEnabled",
                type: {
                    name: "Boolean"
                }
            }, noCache: {
                defaultValue: false,
                serializedName: "noCache",
                type: {
                    name: "Boolean"
                }
            }, dockerFilePath: {
                serializedName: "dockerFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }, arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "timeout",
                type: {
                    name: "Number"
                }
            }, platform: {
                serializedName: "platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceLocation: {
                serializedName: "sourceLocation",
                type: {
                    name: "String"
                }
            }, credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            } })
    }
};
export const FileTaskRunRequest = {
    serializedName: "FileTaskRunRequest",
    type: {
        name: "Composite",
        className: "FileTaskRunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { taskFilePath: {
                serializedName: "taskFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, valuesFilePath: {
                serializedName: "valuesFilePath",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "timeout",
                type: {
                    name: "Number"
                }
            }, platform: {
                serializedName: "platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceLocation: {
                serializedName: "sourceLocation",
                type: {
                    name: "String"
                }
            }, credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            } })
    }
};
export const TaskRunRequest = {
    serializedName: "TaskRunRequest",
    type: {
        name: "Composite",
        className: "TaskRunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { taskId: {
                serializedName: "taskId",
                required: true,
                type: {
                    name: "String"
                }
            }, overrideTaskStepProperties: {
                serializedName: "overrideTaskStepProperties",
                type: {
                    name: "Composite",
                    className: "OverrideTaskStepProperties"
                }
            } })
    }
};
export const EncodedTaskRunRequest = {
    serializedName: "EncodedTaskRunRequest",
    type: {
        name: "Composite",
        className: "EncodedTaskRunRequest",
        uberParent: "RunRequest",
        polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, RunRequest.type.modelProperties), { encodedTaskContent: {
                serializedName: "encodedTaskContent",
                required: true,
                type: {
                    name: "String"
                }
            }, encodedValuesContent: {
                serializedName: "encodedValuesContent",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            }, timeout: {
                defaultValue: 3600,
                constraints: {
                    InclusiveMaximum: 28800,
                    InclusiveMinimum: 300
                },
                serializedName: "timeout",
                type: {
                    name: "Number"
                }
            }, platform: {
                serializedName: "platform",
                type: {
                    name: "Composite",
                    className: "PlatformProperties"
                }
            }, agentConfiguration: {
                serializedName: "agentConfiguration",
                type: {
                    name: "Composite",
                    className: "AgentProperties"
                }
            }, sourceLocation: {
                serializedName: "sourceLocation",
                type: {
                    name: "String"
                }
            }, credentials: {
                serializedName: "credentials",
                type: {
                    name: "Composite",
                    className: "Credentials"
                }
            } })
    }
};
export const DockerBuildStep = {
    serializedName: "Docker",
    type: {
        name: "Composite",
        className: "DockerBuildStep",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepProperties.type.modelProperties), { imageNames: {
                serializedName: "imageNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, isPushEnabled: {
                defaultValue: true,
                serializedName: "isPushEnabled",
                type: {
                    name: "Boolean"
                }
            }, noCache: {
                defaultValue: false,
                serializedName: "noCache",
                type: {
                    name: "Boolean"
                }
            }, dockerFilePath: {
                serializedName: "dockerFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            }, arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            } })
    }
};
export const FileTaskStep = {
    serializedName: "FileTask",
    type: {
        name: "Composite",
        className: "FileTaskStep",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepProperties.type.modelProperties), { taskFilePath: {
                serializedName: "taskFilePath",
                required: true,
                type: {
                    name: "String"
                }
            }, valuesFilePath: {
                serializedName: "valuesFilePath",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
export const EncodedTaskStep = {
    serializedName: "EncodedTask",
    type: {
        name: "Composite",
        className: "EncodedTaskStep",
        uberParent: "TaskStepProperties",
        polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepProperties.type.modelProperties), { encodedTaskContent: {
                serializedName: "encodedTaskContent",
                required: true,
                type: {
                    name: "String"
                }
            }, encodedValuesContent: {
                serializedName: "encodedValuesContent",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
export const DockerBuildStepUpdateParameters = {
    serializedName: "Docker",
    type: {
        name: "Composite",
        className: "DockerBuildStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepUpdateParameters.type.modelProperties), { imageNames: {
                serializedName: "imageNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, isPushEnabled: {
                serializedName: "isPushEnabled",
                type: {
                    name: "Boolean"
                }
            }, noCache: {
                serializedName: "noCache",
                type: {
                    name: "Boolean"
                }
            }, dockerFilePath: {
                serializedName: "dockerFilePath",
                type: {
                    name: "String"
                }
            }, arguments: {
                serializedName: "arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Argument"
                        }
                    }
                }
            }, target: {
                serializedName: "target",
                type: {
                    name: "String"
                }
            } })
    }
};
export const FileTaskStepUpdateParameters = {
    serializedName: "FileTask",
    type: {
        name: "Composite",
        className: "FileTaskStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepUpdateParameters.type.modelProperties), { taskFilePath: {
                serializedName: "taskFilePath",
                type: {
                    name: "String"
                }
            }, valuesFilePath: {
                serializedName: "valuesFilePath",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
export const EncodedTaskStepUpdateParameters = {
    serializedName: "EncodedTask",
    type: {
        name: "Composite",
        className: "EncodedTaskStepUpdateParameters",
        uberParent: "TaskStepUpdateParameters",
        polymorphicDiscriminator: TaskStepUpdateParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, TaskStepUpdateParameters.type.modelProperties), { encodedTaskContent: {
                serializedName: "encodedTaskContent",
                type: {
                    name: "String"
                }
            }, encodedValuesContent: {
                serializedName: "encodedValuesContent",
                type: {
                    name: "String"
                }
            }, values: {
                serializedName: "values",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SetValue"
                        }
                    }
                }
            } })
    }
};
export let discriminators = {
    RunRequest: RunRequest,
    TaskStepProperties: TaskStepProperties,
    TaskStepUpdateParameters: TaskStepUpdateParameters,
    "RunRequest.DockerBuildRequest": DockerBuildRequest,
    "RunRequest.FileTaskRunRequest": FileTaskRunRequest,
    "RunRequest.TaskRunRequest": TaskRunRequest,
    "RunRequest.EncodedTaskRunRequest": EncodedTaskRunRequest,
    "TaskStepProperties.Docker": DockerBuildStep,
    "TaskStepProperties.FileTask": FileTaskStep,
    "TaskStepProperties.EncodedTask": EncodedTaskStep,
    "TaskStepUpdateParameters.Docker": DockerBuildStepUpdateParameters,
    "TaskStepUpdateParameters.FileTask": FileTaskStepUpdateParameters,
    "TaskStepUpdateParameters.EncodedTask": EncodedTaskStepUpdateParameters
};
//# sourceMappingURL=mappers.js.map