/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { ImportImageParameters as ImportImageParametersMapper, RegistryNameCheckRequest as RegistryNameCheckRequestMapper, Registry as RegistryMapper, RegistryUpdateParameters as RegistryUpdateParametersMapper, RegenerateCredentialParameters as RegenerateCredentialParametersMapper, RunRequest as RunRequestMapper, PrivateEndpointConnection as PrivateEndpointConnectionMapper, Replication as ReplicationMapper, ReplicationUpdateParameters as ReplicationUpdateParametersMapper, WebhookCreateParameters as WebhookCreateParametersMapper, WebhookUpdateParameters as WebhookUpdateParametersMapper, AgentPool as AgentPoolMapper, AgentPoolUpdateParameters as AgentPoolUpdateParametersMapper, RunUpdateParameters as RunUpdateParametersMapper, TaskRun as TaskRunMapper, TaskRunUpdateParameters as TaskRunUpdateParametersMapper, Task as TaskMapper, TaskUpdateParameters as TaskUpdateParametersMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const parameters = {
    parameterPath: "parameters",
    mapper: ImportImageParametersMapper
};
export const $host = {
    parameterPath: "$host",
    mapper: {
        serializedName: "$host",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-09-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const subscriptionId = {
    parameterPath: "subscriptionId",
    mapper: {
        serializedName: "subscriptionId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const resourceGroupName = {
    parameterPath: "resourceGroupName",
    mapper: {
        constraints: {
            MinLength: 1
        },
        serializedName: "resourceGroupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const registryName = {
    parameterPath: "registryName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "registryName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const registryNameCheckRequest = {
    parameterPath: "registryNameCheckRequest",
    mapper: RegistryNameCheckRequestMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const registry = {
    parameterPath: "registry",
    mapper: RegistryMapper
};
export const registryUpdateParameters = {
    parameterPath: "registryUpdateParameters",
    mapper: RegistryUpdateParametersMapper
};
export const groupName = {
    parameterPath: "groupName",
    mapper: {
        serializedName: "groupName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const regenerateCredentialParameters = {
    parameterPath: "regenerateCredentialParameters",
    mapper: RegenerateCredentialParametersMapper
};
export const runRequest = {
    parameterPath: "runRequest",
    mapper: RunRequestMapper
};
export const apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2019-06-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const privateEndpointConnectionName = {
    parameterPath: "privateEndpointConnectionName",
    mapper: {
        serializedName: "privateEndpointConnectionName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const privateEndpointConnection = {
    parameterPath: "privateEndpointConnection",
    mapper: PrivateEndpointConnectionMapper
};
export const replicationName = {
    parameterPath: "replicationName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "replicationName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const replication = {
    parameterPath: "replication",
    mapper: ReplicationMapper
};
export const replicationUpdateParameters = {
    parameterPath: "replicationUpdateParameters",
    mapper: ReplicationUpdateParametersMapper
};
export const webhookName = {
    parameterPath: "webhookName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "webhookName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const webhookCreateParameters = {
    parameterPath: "webhookCreateParameters",
    mapper: WebhookCreateParametersMapper
};
export const webhookUpdateParameters = {
    parameterPath: "webhookUpdateParameters",
    mapper: WebhookUpdateParametersMapper
};
export const agentPoolName = {
    parameterPath: "agentPoolName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]*$"),
            MaxLength: 20,
            MinLength: 3
        },
        serializedName: "agentPoolName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const agentPool = {
    parameterPath: "agentPool",
    mapper: AgentPoolMapper
};
export const updateParameters = {
    parameterPath: "updateParameters",
    mapper: AgentPoolUpdateParametersMapper
};
export const filter = {
    parameterPath: ["options", "filter"],
    mapper: {
        serializedName: "$filter",
        type: {
            name: "String"
        }
    }
};
export const top = {
    parameterPath: ["options", "top"],
    mapper: {
        serializedName: "$top",
        type: {
            name: "Number"
        }
    }
};
export const runId = {
    parameterPath: "runId",
    mapper: {
        serializedName: "runId",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const runUpdateParameters = {
    parameterPath: "runUpdateParameters",
    mapper: RunUpdateParametersMapper
};
export const taskRunName = {
    parameterPath: "taskRunName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "taskRunName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const taskRun = {
    parameterPath: "taskRun",
    mapper: TaskRunMapper
};
export const updateParameters1 = {
    parameterPath: "updateParameters",
    mapper: TaskRunUpdateParametersMapper
};
export const taskName = {
    parameterPath: "taskName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[a-zA-Z0-9-_]*$"),
            MaxLength: 50,
            MinLength: 5
        },
        serializedName: "taskName",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const taskCreateParameters = {
    parameterPath: "taskCreateParameters",
    mapper: TaskMapper
};
export const taskUpdateParameters = {
    parameterPath: "taskUpdateParameters",
    mapper: TaskUpdateParametersMapper
};
//# sourceMappingURL=parameters.js.map