import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Runs } from "../operationsInterfaces";
import { ContainerRegistryManagementClient } from "../containerRegistryManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Run, RunsListOptionalParams, RunsGetOptionalParams, RunsGetResponse, RunUpdateParameters, RunsUpdateOptionalParams, RunsUpdateResponse, RunsGetLogSasUrlOptionalParams, RunsGetLogSasUrlResponse, RunsCancelOptionalParams } from "../models";
/** Class containing Runs operations. */
export declare class RunsImpl implements Runs {
    private readonly client;
    /**
     * Initialize a new instance of the class Runs class.
     * @param client Reference to the service client
     */
    constructor(client: ContainerRegistryManagementClient);
    /**
     * Gets all the runs for a registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: RunsListOptionalParams): PagedAsyncIterableIterator<Run>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Gets all the runs for a registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Gets the detailed information for a given run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, runId: string, options?: RunsGetOptionalParams): Promise<RunsGetResponse>;
    /**
     * Patch the run properties.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param runUpdateParameters The run update properties.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, runId: string, runUpdateParameters: RunUpdateParameters, options?: RunsUpdateOptionalParams): Promise<PollerLike<PollOperationState<RunsUpdateResponse>, RunsUpdateResponse>>;
    /**
     * Patch the run properties.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param runUpdateParameters The run update properties.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, runId: string, runUpdateParameters: RunUpdateParameters, options?: RunsUpdateOptionalParams): Promise<RunsUpdateResponse>;
    /**
     * Gets a link to download the run logs.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    getLogSasUrl(resourceGroupName: string, registryName: string, runId: string, options?: RunsGetLogSasUrlOptionalParams): Promise<RunsGetLogSasUrlResponse>;
    /**
     * Cancel an existing run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName: string, registryName: string, runId: string, options?: RunsCancelOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Cancel an existing run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName: string, registryName: string, runId: string, options?: RunsCancelOptionalParams): Promise<void>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=runs.d.ts.map