import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/**
 * Defines values for Action. \
 * {@link KnownAction} can be used interchangeably with Action,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow**
 */
export declare type Action = string;

/**
 * Defines values for ActionsRequired. \
 * {@link KnownActionsRequired} can be used interchangeably with ActionsRequired,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Recreate**
 */
export declare type ActionsRequired = string;

/** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
export declare interface Actor {
    /** The subject or username associated with the request context that generated the event. */
    name?: string;
}

/**
 * The agentpool that has the ARM resource and properties.
 * The agentpool will have all information to create an agent pool.
 */
export declare type AgentPool = Resource & {
    /** The count of agent machine */
    count?: number;
    /** The Tier of agent machine */
    tier?: string;
    /** The OS of agent machine */
    os?: OS;
    /** The Virtual Network Subnet Resource Id of the agent machine */
    virtualNetworkSubnetResourceId?: string;
    /**
     * The provisioning state of this agent pool
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
};

/** The collection of agent pools. */
export declare interface AgentPoolListResult {
    /** The collection value. */
    value?: AgentPool[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** The QueueStatus of Agent Pool */
export declare interface AgentPoolQueueStatus {
    /** The number of pending runs in the queue */
    count?: number;
}

/** Interface representing a AgentPools. */
export declare interface AgentPools {
    /**
     * Lists all the agent pools for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: AgentPoolsListOptionalParams): PagedAsyncIterableIterator<AgentPool>;
    /**
     * Gets the detailed information for a given agent pool.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, agentPoolName: string, options?: AgentPoolsGetOptionalParams): Promise<AgentPoolsGetResponse>;
    /**
     * Creates an agent pool for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param agentPool The parameters of an agent pool that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, registryName: string, agentPoolName: string, agentPool: AgentPool, options?: AgentPoolsCreateOptionalParams): Promise<PollerLike<PollOperationState<AgentPoolsCreateResponse>, AgentPoolsCreateResponse>>;
    /**
     * Creates an agent pool for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param agentPool The parameters of an agent pool that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, registryName: string, agentPoolName: string, agentPool: AgentPool, options?: AgentPoolsCreateOptionalParams): Promise<AgentPoolsCreateResponse>;
    /**
     * Deletes a specified agent pool resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, registryName: string, agentPoolName: string, options?: AgentPoolsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a specified agent pool resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, registryName: string, agentPoolName: string, options?: AgentPoolsDeleteOptionalParams): Promise<void>;
    /**
     * Updates an agent pool with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param updateParameters The parameters for updating an agent pool.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, agentPoolName: string, updateParameters: AgentPoolUpdateParameters, options?: AgentPoolsUpdateOptionalParams): Promise<PollerLike<PollOperationState<AgentPoolsUpdateResponse>, AgentPoolsUpdateResponse>>;
    /**
     * Updates an agent pool with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param updateParameters The parameters for updating an agent pool.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, agentPoolName: string, updateParameters: AgentPoolUpdateParameters, options?: AgentPoolsUpdateOptionalParams): Promise<AgentPoolsUpdateResponse>;
    /**
     * Gets the count of queued runs for a given agent pool.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param agentPoolName The name of the agent pool.
     * @param options The options parameters.
     */
    getQueueStatus(resourceGroupName: string, registryName: string, agentPoolName: string, options?: AgentPoolsGetQueueStatusOptionalParams): Promise<AgentPoolsGetQueueStatusResponse>;
}

/** Optional parameters. */
export declare interface AgentPoolsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type AgentPoolsCreateResponse = AgentPool;

/** Optional parameters. */
export declare interface AgentPoolsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface AgentPoolsGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface AgentPoolsGetQueueStatusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getQueueStatus operation. */
export declare type AgentPoolsGetQueueStatusResponse = AgentPoolQueueStatus;

/** Contains response data for the get operation. */
export declare type AgentPoolsGetResponse = AgentPool;

/** Optional parameters. */
export declare interface AgentPoolsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AgentPoolsListNextResponse = AgentPoolListResult;

/** Optional parameters. */
export declare interface AgentPoolsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AgentPoolsListResponse = AgentPoolListResult;

/** Optional parameters. */
export declare interface AgentPoolsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type AgentPoolsUpdateResponse = AgentPool;

/** The parameters for updating an agent pool. */
export declare interface AgentPoolUpdateParameters {
    /** The ARM resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The count of agent machine */
    count?: number;
}

/** The properties that determine the run agent configuration. */
export declare interface AgentProperties {
    /** The CPU configuration in terms of number of cores required for the run. */
    cpu?: number;
}

/**
 * Defines values for Architecture. \
 * {@link KnownArchitecture} can be used interchangeably with Architecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **amd64** \
 * **x86** \
 * **386** \
 * **arm** \
 * **arm64**
 */
export declare type Architecture = string;

/** The properties of a run argument. */
export declare interface Argument {
    /** The name of the argument. */
    name: string;
    /** The value of the argument. */
    value: string;
    /** Flag to indicate whether the argument represents a secret and want to be removed from build logs. */
    isSecret?: boolean;
}

/** The authorization properties for accessing the source code repository. */
export declare interface AuthInfo {
    /** The type of Auth token. */
    tokenType: TokenType;
    /** The access token used to access the source control provider. */
    token: string;
    /** The refresh token used to refresh the access token. */
    refreshToken?: string;
    /** The scope of the access token. */
    scope?: string;
    /** Time in seconds that the token remains valid */
    expiresIn?: number;
}

/** The authorization properties for accessing the source code repository. */
export declare interface AuthInfoUpdateParameters {
    /** The type of Auth token. */
    tokenType?: TokenType;
    /** The access token used to access the source control provider. */
    token?: string;
    /** The refresh token used to refresh the access token. */
    refreshToken?: string;
    /** The scope of the access token. */
    scope?: string;
    /** Time in seconds that the token remains valid */
    expiresIn?: number;
}

/** Properties that describe a base image dependency. */
export declare interface BaseImageDependency {
    /** The type of the base image dependency. */
    type?: BaseImageDependencyType;
    /** The registry login server. */
    registry?: string;
    /** The repository name. */
    repository?: string;
    /** The tag name. */
    tag?: string;
    /** The sha256-based digest of the image manifest. */
    digest?: string;
}

/**
 * Defines values for BaseImageDependencyType. \
 * {@link KnownBaseImageDependencyType} can be used interchangeably with BaseImageDependencyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BuildTime** \
 * **RunTime**
 */
export declare type BaseImageDependencyType = string;

/** The trigger based on base image dependency. */
export declare interface BaseImageTrigger {
    /** The type of the auto trigger for base image dependency updates. */
    baseImageTriggerType: BaseImageTriggerType;
    /** The endpoint URL for receiving update triggers. */
    updateTriggerEndpoint?: string;
    /** Type of Payload body for Base image update triggers. */
    updateTriggerPayloadType?: UpdateTriggerPayloadType;
    /** The current status of trigger. */
    status?: TriggerStatus;
    /** The name of the trigger. */
    name: string;
}

/**
 * Defines values for BaseImageTriggerType. \
 * {@link KnownBaseImageTriggerType} can be used interchangeably with BaseImageTriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **All** \
 * **Runtime**
 */
export declare type BaseImageTriggerType = string;

/** The properties for updating base image dependency trigger. */
export declare interface BaseImageTriggerUpdateParameters {
    /** The type of the auto trigger for base image dependency updates. */
    baseImageTriggerType?: BaseImageTriggerType;
    /** The endpoint URL for receiving update triggers. */
    updateTriggerEndpoint?: string;
    /** Type of Payload body for Base image update triggers. */
    updateTriggerPayloadType?: UpdateTriggerPayloadType;
    /** The current status of trigger. */
    status?: TriggerStatus;
    /** The name of the trigger. */
    name: string;
}

/** The configuration of service URI and custom headers for the webhook. */
export declare interface CallbackConfig {
    /** The service URI for the webhook to post notifications. */
    serviceUri: string;
    /** Custom headers that will be added to the webhook notifications. */
    customHeaders?: {
        [propertyName: string]: string;
    };
}

/**
 * Defines values for ConnectionStatus. \
 * {@link KnownConnectionStatus} can be used interchangeably with ConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved** \
 * **Pending** \
 * **Rejected** \
 * **Disconnected**
 */
export declare type ConnectionStatus = string;

export declare class ContainerRegistryManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the ContainerRegistryManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The Microsoft Azure subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: ContainerRegistryManagementClientOptionalParams);
    registries: Registries;
    operations: Operations;
    privateEndpointConnections: PrivateEndpointConnections;
    replications: Replications;
    webhooks: Webhooks;
    agentPools: AgentPools;
    runs: Runs;
    taskRuns: TaskRuns;
    tasks: Tasks;
}

/** Optional parameters. */
export declare interface ContainerRegistryManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/** The parameters that describes a set of credentials that will be used when a run is invoked. */
export declare interface Credentials {
    /** Describes the credential parameters for accessing the source registry. */
    sourceRegistry?: SourceRegistryCredentials;
    /**
     * Describes the credential parameters for accessing other custom registries. The key
     * for the dictionary item will be the registry login server (myregistry.azurecr.io) and
     * the value of the item will be the registry credentials for accessing the registry.
     */
    customRegistries?: {
        [propertyName: string]: CustomRegistryCredentials;
    };
}

/** Describes the credentials that will be used to access a custom registry during a run. */
export declare interface CustomRegistryCredentials {
    /** The username for logging into the custom registry. */
    userName?: SecretObject;
    /**
     * The password for logging into the custom registry. The password is a secret
     * object that allows multiple ways of providing the value for it.
     */
    password?: SecretObject;
    /**
     * Indicates the managed identity assigned to the custom credential. If a user-assigned identity
     * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
     * the case of a system-assigned identity, the Client ID will be determined by the runner. This
     * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
     * source of authentication used for accessing the registry.
     */
    identity?: string;
}

/**
 * Defines values for DefaultAction. \
 * {@link KnownDefaultAction} can be used interchangeably with DefaultAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export declare type DefaultAction = string;

/** The parameters for a docker quick build. */
export declare type DockerBuildRequest = RunRequest & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DockerBuildRequest";
    /** The fully qualified image names including the repository and tag. */
    imageNames?: string[];
    /** The value of this property indicates whether the image built should be pushed to the registry or not. */
    isPushEnabled?: boolean;
    /** The value of this property indicates whether the image cache is enabled or not. */
    noCache?: boolean;
    /** The Docker file path relative to the source location. */
    dockerFilePath: string;
    /** The name of the target build stage for the docker build. */
    target?: string;
    /** The collection of override arguments to be used when executing the run. */
    arguments?: Argument[];
    /** Run timeout in seconds. */
    timeout?: number;
    /** The platform properties against which the run has to happen. */
    platform: PlatformProperties;
    /** The machine configuration of the run agent. */
    agentConfiguration?: AgentProperties;
    /**
     * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     */
    sourceLocation?: string;
    /** The properties that describes a set of credentials that will be used when this run is invoked. */
    credentials?: Credentials;
};

/** The Docker build step. */
export declare type DockerBuildStep = TaskStepProperties & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Docker";
    /** The fully qualified image names including the repository and tag. */
    imageNames?: string[];
    /** The value of this property indicates whether the image built should be pushed to the registry or not. */
    isPushEnabled?: boolean;
    /** The value of this property indicates whether the image cache is enabled or not. */
    noCache?: boolean;
    /** The Docker file path relative to the source context. */
    dockerFilePath: string;
    /** The name of the target build stage for the docker build. */
    target?: string;
    /** The collection of override arguments to be used when executing this build step. */
    arguments?: Argument[];
};

/** The properties for updating a docker build step. */
export declare type DockerBuildStepUpdateParameters = TaskStepUpdateParameters & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Docker";
    /** The fully qualified image names including the repository and tag. */
    imageNames?: string[];
    /** The value of this property indicates whether the image built should be pushed to the registry or not. */
    isPushEnabled?: boolean;
    /** The value of this property indicates whether the image cache is enabled or not. */
    noCache?: boolean;
    /** The Docker file path relative to the source context. */
    dockerFilePath?: string;
    /** The collection of override arguments to be used when executing this build step. */
    arguments?: Argument[];
    /** The name of the target build stage for the docker build. */
    target?: string;
};

/** The parameters for a quick task run request. */
export declare type EncodedTaskRunRequest = RunRequest & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "EncodedTaskRunRequest";
    /** Base64 encoded value of the template/definition file content. */
    encodedTaskContent: string;
    /** Base64 encoded value of the parameters/values file content. */
    encodedValuesContent?: string;
    /** The collection of overridable values that can be passed when running a task. */
    values?: SetValue[];
    /** Run timeout in seconds. */
    timeout?: number;
    /** The platform properties against which the run has to happen. */
    platform: PlatformProperties;
    /** The machine configuration of the run agent. */
    agentConfiguration?: AgentProperties;
    /**
     * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     */
    sourceLocation?: string;
    /** The properties that describes a set of credentials that will be used when this run is invoked. */
    credentials?: Credentials;
};

/** The properties of a encoded task step. */
export declare type EncodedTaskStep = TaskStepProperties & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "EncodedTask";
    /** Base64 encoded value of the template/definition file content. */
    encodedTaskContent: string;
    /** Base64 encoded value of the parameters/values file content. */
    encodedValuesContent?: string;
    /** The collection of overridable values that can be passed when running a task. */
    values?: SetValue[];
};

/** The properties for updating encoded task step. */
export declare type EncodedTaskStepUpdateParameters = TaskStepUpdateParameters & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "EncodedTask";
    /** Base64 encoded value of the template/definition file content. */
    encodedTaskContent?: string;
    /** Base64 encoded value of the parameters/values file content. */
    encodedValuesContent?: string;
    /** The collection of overridable values that can be passed when running a task. */
    values?: SetValue[];
};

export declare interface EncryptionProperty {
    /** Indicates whether or not the encryption is enabled for container registry. */
    status?: EncryptionStatus;
    /** Key vault properties. */
    keyVaultProperties?: KeyVaultProperties;
}

/**
 * Defines values for EncryptionStatus. \
 * {@link KnownEncryptionStatus} can be used interchangeably with EncryptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export declare type EncryptionStatus = string;

/** An error response from the Azure Container Registry service. */
export declare interface ErrorResponse {
    /** Azure container registry build API error body. */
    error?: ErrorResponseBody;
}

/** An error response from the Azure Container Registry service. */
export declare interface ErrorResponseBody {
    /** error code. */
    code: string;
    /** error message. */
    message: string;
    /** target of the particular error. */
    target?: string;
    /** an array of additional nested error response info objects, as described by this contract. */
    details?: InnerErrorDescription[];
}

/** The event for a webhook. */
declare type Event_2 = EventInfo & {
    /** The event request message sent to the service URI. */
    eventRequestMessage?: EventRequestMessage;
    /** The event response message received from the service URI. */
    eventResponseMessage?: EventResponseMessage;
};
export { Event_2 as Event }

/** The content of the event request message. */
export declare interface EventContent {
    /** The event ID. */
    id?: string;
    /** The time at which the event occurred. */
    timestamp?: Date;
    /** The action that encompasses the provided event. */
    action?: string;
    /** The target of the event. */
    target?: Target;
    /** The request that generated the event. */
    request?: Request_2;
    /** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
    actor?: Actor;
    /** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
    source?: Source;
}

/** The basic information of an event. */
export declare interface EventInfo {
    /** The event ID. */
    id?: string;
}

/** The result of a request to list events for a webhook. */
export declare interface EventListResult {
    /** The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events. */
    value?: Event_2[];
    /** The URI that can be used to request the next list of events. */
    nextLink?: string;
}

/** The event request message sent to the service URI. */
export declare interface EventRequestMessage {
    /** The content of the event request message. */
    content?: EventContent;
    /** The headers of the event request message. */
    headers?: {
        [propertyName: string]: string;
    };
    /** The HTTP method used to send the event request message. */
    method?: string;
    /** The URI used to send the event request message. */
    requestUri?: string;
    /** The HTTP message version. */
    version?: string;
}

/** The event response message received from the service URI. */
export declare interface EventResponseMessage {
    /** The content of the event response message. */
    content?: string;
    /** The headers of the event response message. */
    headers?: {
        [propertyName: string]: string;
    };
    /** The reason phrase of the event response message. */
    reasonPhrase?: string;
    /** The status code of the event response message. */
    statusCode?: string;
    /** The HTTP message version. */
    version?: string;
}

/** The export policy for a container registry. */
export declare interface ExportPolicy {
    /** The value that indicates whether the policy is enabled or not. */
    status?: ExportPolicyStatus;
}

/**
 * Defines values for ExportPolicyStatus. \
 * {@link KnownExportPolicyStatus} can be used interchangeably with ExportPolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export declare type ExportPolicyStatus = string;

/** The request parameters for a scheduling run against a task file. */
export declare type FileTaskRunRequest = RunRequest & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileTaskRunRequest";
    /** The template/definition file path relative to the source. */
    taskFilePath: string;
    /** The values/parameters file path relative to the source. */
    valuesFilePath?: string;
    /** The collection of overridable values that can be passed when running a task. */
    values?: SetValue[];
    /** Run timeout in seconds. */
    timeout?: number;
    /** The platform properties against which the run has to happen. */
    platform: PlatformProperties;
    /** The machine configuration of the run agent. */
    agentConfiguration?: AgentProperties;
    /**
     * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
     * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
     */
    sourceLocation?: string;
    /** The properties that describes a set of credentials that will be used when this run is invoked. */
    credentials?: Credentials;
};

/** The properties of a task step. */
export declare type FileTaskStep = TaskStepProperties & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileTask";
    /** The task template/definition file path relative to the source context. */
    taskFilePath: string;
    /** The task values/parameters file path relative to the source context. */
    valuesFilePath?: string;
    /** The collection of overridable values that can be passed when running a task. */
    values?: SetValue[];
};

/** The properties of updating a task step. */
export declare type FileTaskStepUpdateParameters = TaskStepUpdateParameters & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "FileTask";
    /** The task template/definition file path relative to the source context. */
    taskFilePath?: string;
    /** The values/parameters file path relative to the source context. */
    valuesFilePath?: string;
    /** The collection of overridable values that can be passed when running a task. */
    values?: SetValue[];
};

/** Managed identity for the resource. */
export declare interface IdentityProperties {
    /** The principal ID of resource identity. */
    principalId?: string;
    /** The tenant ID of resource. */
    tenantId?: string;
    /** The identity type. */
    type?: ResourceIdentityType;
    /**
     * The list of user identities associated with the resource. The user identity
     * dictionary key references will be ARM resource ids in the form:
     * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
     *     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
     */
    userAssignedIdentities?: {
        [propertyName: string]: UserIdentityProperties;
    };
}

/** Properties for a registry image. */
export declare interface ImageDescriptor {
    /** The registry login server. */
    registry?: string;
    /** The repository name. */
    repository?: string;
    /** The tag name. */
    tag?: string;
    /** The sha256-based digest of the image manifest. */
    digest?: string;
}

/** The image update trigger that caused a build. */
export declare interface ImageUpdateTrigger {
    /** The unique ID of the trigger. */
    id?: string;
    /** The timestamp when the image update happened. */
    timestamp?: Date;
    /** The list of image updates that caused the build. */
    images?: ImageDescriptor[];
}

export declare interface ImportImageParameters {
    /** The source of the image. */
    source: ImportSource;
    /** List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted). */
    targetTags?: string[];
    /** List of strings of repository names to do a manifest only copy. No tag will be created. */
    untaggedTargetRepositories?: string[];
    /** When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation before any copying begins. */
    mode?: ImportMode;
}

/**
 * Defines values for ImportMode. \
 * {@link KnownImportMode} can be used interchangeably with ImportMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoForce** \
 * **Force**
 */
export declare type ImportMode = string;

export declare interface ImportSource {
    /** The resource identifier of the source Azure Container Registry. */
    resourceId?: string;
    /** The address of the source registry (e.g. 'mcr.microsoft.com'). */
    registryUri?: string;
    /** Credentials used when importing from a registry uri. */
    credentials?: ImportSourceCredentials;
    /**
     * Repository name of the source image.
     * Specify an image by repository ('hello-world'). This will use the 'latest' tag.
     * Specify an image by tag ('hello-world:latest').
     * Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
     */
    sourceImage: string;
}

export declare interface ImportSourceCredentials {
    /** The username to authenticate with the source registry. */
    username?: string;
    /** The password used to authenticate with the source registry. */
    password: string;
}

/** inner error. */
export declare interface InnerErrorDescription {
    /** error code. */
    code: string;
    /** error message. */
    message: string;
    /** target of the particular error. */
    target?: string;
}

/** IP rule with specific IP or IP range in CIDR format. */
export declare interface IPRule {
    /** The action of IP ACL rule. */
    action?: Action;
    /** Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed. */
    iPAddressOrRange: string;
}

export declare interface KeyVaultProperties {
    /** Key vault uri to access the encryption key. */
    keyIdentifier?: string;
    /**
     * The fully qualified key identifier that includes the version of the key that is actually used for encryption.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versionedKeyIdentifier?: string;
    /** The client id of the identity which will be used to access key vault. */
    identity?: string;
    /**
     * Auto key rotation status for a CMK enabled registry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly keyRotationEnabled?: boolean;
    /**
     * Timestamp of the last successful key rotation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastKeyRotationTimestamp?: Date;
}

/** Known values of {@link Action} that the service accepts. */
export declare enum KnownAction {
    Allow = "Allow"
}

/** Known values of {@link ActionsRequired} that the service accepts. */
export declare enum KnownActionsRequired {
    None = "None",
    Recreate = "Recreate"
}

/** Known values of {@link Architecture} that the service accepts. */
export declare enum KnownArchitecture {
    Amd64 = "amd64",
    X86 = "x86",
    ThreeHundredEightySix = "386",
    Arm = "arm",
    Arm64 = "arm64"
}

/** Known values of {@link BaseImageDependencyType} that the service accepts. */
export declare enum KnownBaseImageDependencyType {
    BuildTime = "BuildTime",
    RunTime = "RunTime"
}

/** Known values of {@link BaseImageTriggerType} that the service accepts. */
export declare enum KnownBaseImageTriggerType {
    All = "All",
    Runtime = "Runtime"
}

/** Known values of {@link ConnectionStatus} that the service accepts. */
export declare enum KnownConnectionStatus {
    Approved = "Approved",
    Pending = "Pending",
    Rejected = "Rejected",
    Disconnected = "Disconnected"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    User = "User",
    Application = "Application",
    ManagedIdentity = "ManagedIdentity",
    Key = "Key"
}

/** Known values of {@link DefaultAction} that the service accepts. */
export declare enum KnownDefaultAction {
    Allow = "Allow",
    Deny = "Deny"
}

/** Known values of {@link EncryptionStatus} that the service accepts. */
export declare enum KnownEncryptionStatus {
    Enabled = "enabled",
    Disabled = "disabled"
}

/** Known values of {@link ExportPolicyStatus} that the service accepts. */
export declare enum KnownExportPolicyStatus {
    Enabled = "enabled",
    Disabled = "disabled"
}

/** Known values of {@link ImportMode} that the service accepts. */
export declare enum KnownImportMode {
    NoForce = "NoForce",
    Force = "Force"
}

/** Known values of {@link LastModifiedByType} that the service accepts. */
export declare enum KnownLastModifiedByType {
    User = "User",
    Application = "Application",
    ManagedIdentity = "ManagedIdentity",
    Key = "Key"
}

/** Known values of {@link NetworkRuleBypassOptions} that the service accepts. */
export declare enum KnownNetworkRuleBypassOptions {
    AzureServices = "AzureServices",
    None = "None"
}

/** Known values of {@link OS} that the service accepts. */
export declare enum KnownOS {
    Windows = "Windows",
    Linux = "Linux"
}

/** Known values of {@link PolicyStatus} that the service accepts. */
export declare enum KnownPolicyStatus {
    Enabled = "enabled",
    Disabled = "disabled"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    Creating = "Creating",
    Updating = "Updating",
    Deleting = "Deleting",
    Succeeded = "Succeeded",
    Failed = "Failed",
    Canceled = "Canceled"
}

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export declare enum KnownPublicNetworkAccess {
    Enabled = "Enabled",
    Disabled = "Disabled"
}

/** Known values of {@link RegistryUsageUnit} that the service accepts. */
export declare enum KnownRegistryUsageUnit {
    Count = "Count",
    Bytes = "Bytes"
}

/** Known values of {@link RunStatus} that the service accepts. */
export declare enum KnownRunStatus {
    Queued = "Queued",
    Started = "Started",
    Running = "Running",
    Succeeded = "Succeeded",
    Failed = "Failed",
    Canceled = "Canceled",
    Error = "Error",
    Timeout = "Timeout"
}

/** Known values of {@link RunType} that the service accepts. */
export declare enum KnownRunType {
    QuickBuild = "QuickBuild",
    QuickRun = "QuickRun",
    AutoBuild = "AutoBuild",
    AutoRun = "AutoRun"
}

/** Known values of {@link SecretObjectType} that the service accepts. */
export declare enum KnownSecretObjectType {
    Opaque = "Opaque",
    Vaultsecret = "Vaultsecret"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    Classic = "Classic",
    Basic = "Basic",
    Standard = "Standard",
    Premium = "Premium"
}

/** Known values of {@link SkuTier} that the service accepts. */
export declare enum KnownSkuTier {
    Classic = "Classic",
    Basic = "Basic",
    Standard = "Standard",
    Premium = "Premium"
}

/** Known values of {@link SourceControlType} that the service accepts. */
export declare enum KnownSourceControlType {
    Github = "Github",
    VisualStudioTeamService = "VisualStudioTeamService"
}

/** Known values of {@link SourceRegistryLoginMode} that the service accepts. */
export declare enum KnownSourceRegistryLoginMode {
    None = "None",
    Default = "Default"
}

/** Known values of {@link SourceTriggerEvent} that the service accepts. */
export declare enum KnownSourceTriggerEvent {
    Commit = "commit",
    Pullrequest = "pullrequest"
}

/** Known values of {@link StepType} that the service accepts. */
export declare enum KnownStepType {
    Docker = "Docker",
    FileTask = "FileTask",
    EncodedTask = "EncodedTask"
}

/** Known values of {@link TaskStatus} that the service accepts. */
export declare enum KnownTaskStatus {
    Disabled = "Disabled",
    Enabled = "Enabled"
}

/** Known values of {@link TokenType} that the service accepts. */
export declare enum KnownTokenType {
    PAT = "PAT",
    OAuth = "OAuth"
}

/** Known values of {@link TriggerStatus} that the service accepts. */
export declare enum KnownTriggerStatus {
    Disabled = "Disabled",
    Enabled = "Enabled"
}

/** Known values of {@link TrustPolicyType} that the service accepts. */
export declare enum KnownTrustPolicyType {
    Notary = "Notary"
}

/** Known values of {@link UpdateTriggerPayloadType} that the service accepts. */
export declare enum KnownUpdateTriggerPayloadType {
    Default = "Default",
    Token = "Token"
}

/** Known values of {@link Variant} that the service accepts. */
export declare enum KnownVariant {
    V6 = "v6",
    V7 = "v7",
    V8 = "v8"
}

/** Known values of {@link WebhookAction} that the service accepts. */
export declare enum KnownWebhookAction {
    Push = "push",
    Delete = "delete",
    Quarantine = "quarantine",
    ChartPush = "chart_push",
    ChartDelete = "chart_delete"
}

/** Known values of {@link WebhookStatus} that the service accepts. */
export declare enum KnownWebhookStatus {
    Enabled = "enabled",
    Disabled = "disabled"
}

/** Known values of {@link ZoneRedundancy} that the service accepts. */
export declare enum KnownZoneRedundancy {
    Enabled = "Enabled",
    Disabled = "Disabled"
}

/**
 * Defines values for LastModifiedByType. \
 * {@link KnownLastModifiedByType} can be used interchangeably with LastModifiedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type LastModifiedByType = string;

/**
 * Defines values for NetworkRuleBypassOptions. \
 * {@link KnownNetworkRuleBypassOptions} can be used interchangeably with NetworkRuleBypassOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureServices** \
 * **None**
 */
export declare type NetworkRuleBypassOptions = string;

/** The network rule set for a container registry. */
export declare interface NetworkRuleSet {
    /** The default action of allow or deny when no other rules match. */
    defaultAction: DefaultAction;
    /** The IP ACL rules. */
    ipRules?: IPRule[];
}

/** The definition of a container registry operation. */
export declare interface OperationDefinition {
    /** The origin information of the container registry operation. */
    origin?: string;
    /** Operation name: {provider}/{resource}/{operation}. */
    name?: string;
    /** The display information for the container registry operation. */
    display?: OperationDisplayDefinition;
    /**
     * This property indicates if the operation is an action or a data action
     * ref: https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#management-and-data-operations
     */
    isDataAction?: boolean;
    /** The definition of Azure Monitoring service. */
    serviceSpecification?: OperationServiceSpecificationDefinition;
}

/** The display information for a container registry operation. */
export declare interface OperationDisplayDefinition {
    /** The resource provider name: Microsoft.ContainerRegistry. */
    provider?: string;
    /** The resource on which the operation is performed. */
    resource?: string;
    /** The operation that users can perform. */
    operation?: string;
    /** The description for the operation. */
    description?: string;
}

/** The result of a request to list container registry operations. */
export declare interface OperationListResult {
    /** The list of container registry operations. Since this list may be incomplete, the nextLink field should be used to request the next list of operations. */
    value?: OperationDefinition[];
    /** The URI that can be used to request the next list of container registry operations. */
    nextLink?: string;
}

/** The definition of Azure Monitoring log. */
export declare interface OperationLogSpecificationDefinition {
    /** Log name. */
    name?: string;
    /** Log display name. */
    displayName?: string;
    /** Log blob duration. */
    blobDuration?: string;
}

/** The definition of Azure Monitoring metric. */
export declare interface OperationMetricSpecificationDefinition {
    /** Metric name. */
    name?: string;
    /** Metric display name. */
    displayName?: string;
    /** Metric description. */
    displayDescription?: string;
    /** Metric unit. */
    unit?: string;
    /** Metric aggregation type. */
    aggregationType?: string;
    /** Internal metric name. */
    internalMetricName?: string;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Lists all of the available Azure Container Registry REST API operations.
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): PagedAsyncIterableIterator<OperationDefinition>;
}

/** The definition of Azure Monitoring list. */
export declare interface OperationServiceSpecificationDefinition {
    /** A list of Azure Monitoring metrics definition. */
    metricSpecifications?: OperationMetricSpecificationDefinition[];
    /** A list of Azure Monitoring log definitions. */
    logSpecifications?: OperationLogSpecificationDefinition[];
}

/** Optional parameters. */
export declare interface OperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = OperationListResult;

/**
 * Defines values for OS. \
 * {@link KnownOS} can be used interchangeably with OS,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export declare type OS = string;

export declare interface OverrideTaskStepProperties {
    /** The source context against which run has to be queued. */
    contextPath?: string;
    /** The file against which run has to be queued. */
    file?: string;
    /**
     * Gets or sets the collection of override arguments to be used when
     * executing a build step.
     */
    arguments?: Argument[];
    /** The name of the target build stage for the docker build. */
    target?: string;
    /** The collection of overridable values that can be passed when running a Task. */
    values?: SetValue[];
    /** Base64 encoded update trigger token that will be attached with the base image trigger webhook. */
    updateTriggerToken?: string;
}

/** The properties of a package type. */
export declare interface PackageType {
    /** The name of the package type. */
    name?: string;
    /**
     * The endpoint of the package type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endpoint?: string;
}

/** Defines values for PasswordName. */
export declare type PasswordName = "password" | "password2";

/** The platform properties against which the run has to happen. */
export declare interface PlatformProperties {
    /** The operating system type required for the run. */
    os: OS;
    /** The OS architecture. */
    architecture?: Architecture;
    /** Variant of the CPU. */
    variant?: Variant;
}

/** The properties for updating the platform configuration. */
export declare interface PlatformUpdateParameters {
    /** The operating system type required for the run. */
    os?: OS;
    /** The OS architecture. */
    architecture?: Architecture;
    /** Variant of the CPU. */
    variant?: Variant;
}

/** The policies for a container registry. */
export declare interface Policies {
    /** The quarantine policy for a container registry. */
    quarantinePolicy?: QuarantinePolicy;
    /** The content trust policy for a container registry. */
    trustPolicy?: TrustPolicy;
    /** The retention policy for a container registry. */
    retentionPolicy?: RetentionPolicy;
    /** The export policy for a container registry. */
    exportPolicy?: ExportPolicy;
}

/**
 * Defines values for PolicyStatus. \
 * {@link KnownPolicyStatus} can be used interchangeably with PolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export declare type PolicyStatus = string;

/** The Private Endpoint resource. */
export declare interface PrivateEndpoint {
    /** This is private endpoint resource created with Microsoft.Network resource provider. */
    id?: string;
}

/** An object that represents a private endpoint connection for a container registry. */
export declare type PrivateEndpointConnection = ProxyResource & {
    /** The resource of private endpoint. */
    privateEndpoint?: PrivateEndpoint;
    /** A collection of information about the state of the connection between service consumer and provider. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * The provisioning state of private endpoint connection resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
};

/** The result of a request to list private endpoint connections for a container registry. */
export declare interface PrivateEndpointConnectionListResult {
    /** The list of private endpoint connections. Since this list may be incomplete, the nextLink field should be used to request the next list of private endpoint connections. */
    value?: PrivateEndpointConnection[];
    /** The URI that can be used to request the next list of private endpoint connections. */
    nextLink?: string;
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * List all private endpoint connections in a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Get the specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Update the state of specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection The parameters for creating a private endpoint connection.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, registryName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsCreateOrUpdateResponse>, PrivateEndpointConnectionsCreateOrUpdateResponse>>;
    /**
     * Update the state of specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param privateEndpointConnection The parameters for creating a private endpoint connection.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, registryName: string, privateEndpointConnectionName: string, privateEndpointConnection: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOrUpdateOptionalParams): Promise<PrivateEndpointConnectionsCreateOrUpdateResponse>;
    /**
     * Deletes the specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, registryName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the specified private endpoint connection associated with the container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, registryName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/** A resource that supports private link capabilities. */
export declare interface PrivateLinkResource {
    /**
     * The resource type is private link resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The resource ID. */
    id?: string;
    /** The name of the resource. */
    name?: string;
    /** The private link resource group id. */
    groupId?: string;
    /** The private link resource required member names. */
    requiredMembers?: string[];
    /** The private link resource Private link DNS zone name. */
    requiredZoneNames?: string[];
}

/** The result of a request to list private link resources for a container registry. */
export declare interface PrivateLinkResourceListResult {
    /** The list of private link resources. Since this list may be incomplete, the nextLink field should be used to request the next list of private link resources. */
    value?: PrivateLinkResource[];
    /** The URI that can be used to request the next list of private link resources. */
    nextLink?: string;
}

/** The state of a private link service connection. */
export declare interface PrivateLinkServiceConnectionState {
    /** The private link service connection status. */
    status?: ConnectionStatus;
    /** The description for connection status. For example if connection is rejected it can indicate reason for rejection. */
    description?: string;
    /** A message indicating if changes on the service provider require any updates on the consumer. */
    actionsRequired?: ActionsRequired;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. */
export declare interface ProxyResource {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type PublicNetworkAccess = string;

/** The quarantine policy for a container registry. */
export declare interface QuarantinePolicy {
    /** The value that indicates whether the policy is enabled or not. */
    status?: PolicyStatus;
}

/** The parameters used to regenerate the login credential. */
export declare interface RegenerateCredentialParameters {
    /** Specifies name of the password which should be regenerated -- password or password2. */
    name: PasswordName;
}

/** Interface representing a Registries. */
export declare interface Registries {
    /**
     * Lists all the container registries under the specified subscription.
     * @param options The options parameters.
     */
    list(options?: RegistriesListOptionalParams): PagedAsyncIterableIterator<Registry>;
    /**
     * Lists all the container registries under the specified resource group.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: RegistriesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Registry>;
    /**
     * Lists the private link resources for a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    listPrivateLinkResources(resourceGroupName: string, registryName: string, options?: RegistriesListPrivateLinkResourcesOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Copies an image to this container registry from the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param parameters The parameters specifying the image to copy and the source container registry.
     * @param options The options parameters.
     */
    beginImportImage(resourceGroupName: string, registryName: string, parameters: ImportImageParameters, options?: RegistriesImportImageOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Copies an image to this container registry from the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param parameters The parameters specifying the image to copy and the source container registry.
     * @param options The options parameters.
     */
    beginImportImageAndWait(resourceGroupName: string, registryName: string, parameters: ImportImageParameters, options?: RegistriesImportImageOptionalParams): Promise<void>;
    /**
     * Checks whether the container registry name is available for use. The name must contain only
     * alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
     * @param registryNameCheckRequest The object containing information for the availability request.
     * @param options The options parameters.
     */
    checkNameAvailability(registryNameCheckRequest: RegistryNameCheckRequest, options?: RegistriesCheckNameAvailabilityOptionalParams): Promise<RegistriesCheckNameAvailabilityResponse>;
    /**
     * Gets the properties of the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, options?: RegistriesGetOptionalParams): Promise<RegistriesGetResponse>;
    /**
     * Creates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param registry The parameters for creating a container registry.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, registryName: string, registry: Registry, options?: RegistriesCreateOptionalParams): Promise<PollerLike<PollOperationState<RegistriesCreateResponse>, RegistriesCreateResponse>>;
    /**
     * Creates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param registry The parameters for creating a container registry.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, registryName: string, registry: Registry, options?: RegistriesCreateOptionalParams): Promise<RegistriesCreateResponse>;
    /**
     * Deletes a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, registryName: string, options?: RegistriesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, registryName: string, options?: RegistriesDeleteOptionalParams): Promise<void>;
    /**
     * Updates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param registryUpdateParameters The parameters for updating a container registry.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, registryUpdateParameters: RegistryUpdateParameters, options?: RegistriesUpdateOptionalParams): Promise<PollerLike<PollOperationState<RegistriesUpdateResponse>, RegistriesUpdateResponse>>;
    /**
     * Updates a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param registryUpdateParameters The parameters for updating a container registry.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, registryUpdateParameters: RegistryUpdateParameters, options?: RegistriesUpdateOptionalParams): Promise<RegistriesUpdateResponse>;
    /**
     * Gets the quota usages for the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    listUsages(resourceGroupName: string, registryName: string, options?: RegistriesListUsagesOptionalParams): Promise<RegistriesListUsagesResponse>;
    /**
     * Gets a private link resource by a specified group name for a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param groupName The name of the private link resource.
     * @param options The options parameters.
     */
    getPrivateLinkResource(resourceGroupName: string, registryName: string, groupName: string, options?: RegistriesGetPrivateLinkResourceOptionalParams): Promise<RegistriesGetPrivateLinkResourceResponse>;
    /**
     * Lists the login credentials for the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    listCredentials(resourceGroupName: string, registryName: string, options?: RegistriesListCredentialsOptionalParams): Promise<RegistriesListCredentialsResponse>;
    /**
     * Regenerates one of the login credentials for the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param regenerateCredentialParameters Specifies name of the password which should be regenerated --
     *                                       password or password2.
     * @param options The options parameters.
     */
    regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: RegenerateCredentialParameters, options?: RegistriesRegenerateCredentialOptionalParams): Promise<RegistriesRegenerateCredentialResponse>;
    /**
     * Schedules a new run based on the request parameters and add it to the run queue.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runRequest The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginScheduleRun(resourceGroupName: string, registryName: string, runRequest: RunRequestUnion, options?: RegistriesScheduleRunOptionalParams): Promise<PollerLike<PollOperationState<RegistriesScheduleRunResponse>, RegistriesScheduleRunResponse>>;
    /**
     * Schedules a new run based on the request parameters and add it to the run queue.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runRequest The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginScheduleRunAndWait(resourceGroupName: string, registryName: string, runRequest: RunRequestUnion, options?: RegistriesScheduleRunOptionalParams): Promise<RegistriesScheduleRunResponse>;
    /**
     * Get the upload location for the user to be able to upload the source.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, options?: RegistriesGetBuildSourceUploadUrlOptionalParams): Promise<RegistriesGetBuildSourceUploadUrlResponse>;
}

/** Optional parameters. */
export declare interface RegistriesCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type RegistriesCheckNameAvailabilityResponse = RegistryNameStatus;

/** Optional parameters. */
export declare interface RegistriesCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type RegistriesCreateResponse = Registry;

/** Optional parameters. */
export declare interface RegistriesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RegistriesGetBuildSourceUploadUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getBuildSourceUploadUrl operation. */
export declare type RegistriesGetBuildSourceUploadUrlResponse = SourceUploadDefinition;

/** Optional parameters. */
export declare interface RegistriesGetOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface RegistriesGetPrivateLinkResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getPrivateLinkResource operation. */
export declare type RegistriesGetPrivateLinkResourceResponse = PrivateLinkResource;

/** Contains response data for the get operation. */
export declare type RegistriesGetResponse = Registry;

/** Optional parameters. */
export declare interface RegistriesImportImageOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RegistriesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type RegistriesListByResourceGroupNextResponse = RegistryListResult;

/** Optional parameters. */
export declare interface RegistriesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type RegistriesListByResourceGroupResponse = RegistryListResult;

/** Optional parameters. */
export declare interface RegistriesListCredentialsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listCredentials operation. */
export declare type RegistriesListCredentialsResponse = RegistryListCredentialsResult;

/** Optional parameters. */
export declare interface RegistriesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type RegistriesListNextResponse = RegistryListResult;

/** Optional parameters. */
export declare interface RegistriesListOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface RegistriesListPrivateLinkResourcesNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPrivateLinkResourcesNext operation. */
export declare type RegistriesListPrivateLinkResourcesNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface RegistriesListPrivateLinkResourcesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listPrivateLinkResources operation. */
export declare type RegistriesListPrivateLinkResourcesResponse = PrivateLinkResourceListResult;

/** Contains response data for the list operation. */
export declare type RegistriesListResponse = RegistryListResult;

/** Optional parameters. */
export declare interface RegistriesListUsagesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listUsages operation. */
export declare type RegistriesListUsagesResponse = RegistryUsageListResult;

/** Optional parameters. */
export declare interface RegistriesRegenerateCredentialOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerateCredential operation. */
export declare type RegistriesRegenerateCredentialResponse = RegistryListCredentialsResult;

/** Optional parameters. */
export declare interface RegistriesScheduleRunOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the scheduleRun operation. */
export declare type RegistriesScheduleRunResponse = Run;

/** Optional parameters. */
export declare interface RegistriesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type RegistriesUpdateResponse = Registry;

/** An object that represents a container registry. */
export declare type Registry = Resource & {
    /** The SKU of the container registry. */
    sku: Sku;
    /** The identity of the container registry. */
    identity?: IdentityProperties;
    /**
     * The URL that can be used to log into the container registry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly loginServer?: string;
    /**
     * The creation date of the container registry in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /**
     * The provisioning state of the container registry at the time the operation was called.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The status of the container registry at the time the operation was called.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
    /** The value that indicates whether the admin user is enabled. */
    adminUserEnabled?: boolean;
    /** The network rule set for a container registry. */
    networkRuleSet?: NetworkRuleSet;
    /** The policies for a container registry. */
    policies?: Policies;
    /** The encryption settings of container registry. */
    encryption?: EncryptionProperty;
    /** Enable a single data endpoint per region for serving data. */
    dataEndpointEnabled?: boolean;
    /**
     * List of host names that will serve data when dataEndpointEnabled is true.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataEndpointHostNames?: string[];
    /**
     * List of private endpoint connections for a container registry.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnection[];
    /** Whether or not public network access is allowed for the container registry. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Whether to allow trusted Azure services to access a network restricted registry. */
    networkRuleBypassOptions?: NetworkRuleBypassOptions;
    /** Whether or not zone redundancy is enabled for this container registry */
    zoneRedundancy?: ZoneRedundancy;
};

/** The response from the ListCredentials operation. */
export declare interface RegistryListCredentialsResult {
    /** The username for a container registry. */
    username?: string;
    /** The list of passwords for a container registry. */
    passwords?: RegistryPassword[];
}

/** The result of a request to list container registries. */
export declare interface RegistryListResult {
    /** The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries. */
    value?: Registry[];
    /** The URI that can be used to request the next list of container registries. */
    nextLink?: string;
}

/** A request to check whether a container registry name is available. */
export declare interface RegistryNameCheckRequest {
    /** The name of the container registry. */
    name: string;
    /** The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'. */
    type: "Microsoft.ContainerRegistry/registries";
}

/** The result of a request to check the availability of a container registry name. */
export declare interface RegistryNameStatus {
    /** The value that indicates whether the name is available. */
    nameAvailable?: boolean;
    /** If any, the reason that the name is not available. */
    reason?: string;
    /** If any, the error message that provides more detail for the reason that the name is not available. */
    message?: string;
}

/** The login password for the container registry. */
export declare interface RegistryPassword {
    /** The password name. */
    name?: PasswordName;
    /** The password value. */
    value?: string;
}

/** The parameters for updating a container registry. */
export declare interface RegistryUpdateParameters {
    /** The identity of the container registry. */
    identity?: IdentityProperties;
    /** The tags for the container registry. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The SKU of the container registry. */
    sku?: Sku;
    /** The value that indicates whether the admin user is enabled. */
    adminUserEnabled?: boolean;
    /** The network rule set for a container registry. */
    networkRuleSet?: NetworkRuleSet;
    /** The policies for a container registry. */
    policies?: Policies;
    /** The encryption settings of container registry. */
    encryption?: EncryptionProperty;
    /** Enable a single data endpoint per region for serving data. */
    dataEndpointEnabled?: boolean;
    /** Whether or not public network access is allowed for the container registry. */
    publicNetworkAccess?: PublicNetworkAccess;
    /** Whether to allow trusted Azure services to access a network restricted registry. */
    networkRuleBypassOptions?: NetworkRuleBypassOptions;
}

/** The quota usage for a container registry. */
export declare interface RegistryUsage {
    /** The name of the usage. */
    name?: string;
    /** The limit of the usage. */
    limit?: number;
    /** The current value of the usage. */
    currentValue?: number;
    /** The unit of measurement. */
    unit?: RegistryUsageUnit;
}

/** The result of a request to get container registry quota usages. */
export declare interface RegistryUsageListResult {
    /** The list of container registry quota usages. */
    value?: RegistryUsage[];
}

/**
 * Defines values for RegistryUsageUnit. \
 * {@link KnownRegistryUsageUnit} can be used interchangeably with RegistryUsageUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Bytes**
 */
export declare type RegistryUsageUnit = string;

/** An object that represents a replication for a container registry. */
export declare type Replication = Resource & {
    /**
     * The provisioning state of the replication at the time the operation was called.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The status of the replication at the time the operation was called.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: Status;
    /** Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications. */
    regionEndpointEnabled?: boolean;
    /** Whether or not zone redundancy is enabled for this container registry replication */
    zoneRedundancy?: ZoneRedundancy;
};

/** The result of a request to list replications for a container registry. */
export declare interface ReplicationListResult {
    /** The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications. */
    value?: Replication[];
    /** The URI that can be used to request the next list of replications. */
    nextLink?: string;
}

/** Interface representing a Replications. */
export declare interface Replications {
    /**
     * Lists all the replications for the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: ReplicationsListOptionalParams): PagedAsyncIterableIterator<Replication>;
    /**
     * Gets the properties of the specified replication.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, replicationName: string, options?: ReplicationsGetOptionalParams): Promise<ReplicationsGetResponse>;
    /**
     * Creates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replication The parameters for creating a replication.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, registryName: string, replicationName: string, replication: Replication, options?: ReplicationsCreateOptionalParams): Promise<PollerLike<PollOperationState<ReplicationsCreateResponse>, ReplicationsCreateResponse>>;
    /**
     * Creates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replication The parameters for creating a replication.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, registryName: string, replicationName: string, replication: Replication, options?: ReplicationsCreateOptionalParams): Promise<ReplicationsCreateResponse>;
    /**
     * Deletes a replication from a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, registryName: string, replicationName: string, options?: ReplicationsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a replication from a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, registryName: string, replicationName: string, options?: ReplicationsDeleteOptionalParams): Promise<void>;
    /**
     * Updates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replicationUpdateParameters The parameters for updating a replication.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: ReplicationUpdateParameters, options?: ReplicationsUpdateOptionalParams): Promise<PollerLike<PollOperationState<ReplicationsUpdateResponse>, ReplicationsUpdateResponse>>;
    /**
     * Updates a replication for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param replicationName The name of the replication.
     * @param replicationUpdateParameters The parameters for updating a replication.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: ReplicationUpdateParameters, options?: ReplicationsUpdateOptionalParams): Promise<ReplicationsUpdateResponse>;
}

/** Optional parameters. */
export declare interface ReplicationsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type ReplicationsCreateResponse = Replication;

/** Optional parameters. */
export declare interface ReplicationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface ReplicationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ReplicationsGetResponse = Replication;

/** Optional parameters. */
export declare interface ReplicationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type ReplicationsListNextResponse = ReplicationListResult;

/** Optional parameters. */
export declare interface ReplicationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type ReplicationsListResponse = ReplicationListResult;

/** Optional parameters. */
export declare interface ReplicationsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type ReplicationsUpdateResponse = Replication;

/** The parameters for updating a replication. */
export declare interface ReplicationUpdateParameters {
    /** The tags for the replication. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications. */
    regionEndpointEnabled?: boolean;
}

/** The request that generated the event. */
declare interface Request_2 {
    /** The ID of the request that initiated the event. */
    id?: string;
    /** The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request. */
    addr?: string;
    /** The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests. */
    host?: string;
    /** The request method that generated the event. */
    method?: string;
    /** The user agent header of the request. */
    useragent?: string;
}
export { Request_2 as Request }

/** An Azure resource. */
export declare interface Resource {
    /**
     * The resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /** The location of the resource. This cannot be changed after the resource is created. */
    location: string;
    /** The tags of the resource. */
    tags?: {
        [propertyName: string]: string;
    };
    /**
     * Metadata pertaining to creation and last modification of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "SystemAssigned" | "UserAssigned" | "SystemAssigned, UserAssigned" | "None";

/** The retention policy for a container registry. */
export declare interface RetentionPolicy {
    /** The number of days to retain an untagged manifest after which it gets purged. */
    days?: number;
    /**
     * The timestamp when the policy was last updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdatedTime?: Date;
    /** The value that indicates whether the policy is enabled or not. */
    status?: PolicyStatus;
}

/** Run resource properties */
export declare type Run = ProxyResource & {
    /** The unique identifier for the run. */
    runId?: string;
    /** The current status of the run. */
    status?: RunStatus;
    /** The last updated time for the run. */
    lastUpdatedTime?: Date;
    /** The type of run. */
    runType?: RunType;
    /** The dedicated agent pool for the run. */
    agentPoolName?: string;
    /** The time the run was scheduled. */
    createTime?: Date;
    /** The time the run started. */
    startTime?: Date;
    /** The time the run finished. */
    finishTime?: Date;
    /** The list of all images that were generated from the run. This is applicable if the run generates base image dependencies. */
    outputImages?: ImageDescriptor[];
    /** The task against which run was scheduled. */
    task?: string;
    /** The image update trigger that caused the run. This is applicable if the task has base image trigger configured. */
    imageUpdateTrigger?: ImageUpdateTrigger;
    /** The source trigger that caused the run. */
    sourceTrigger?: SourceTriggerDescriptor;
    /** The timer trigger that caused the run. */
    timerTrigger?: TimerTriggerDescriptor;
    /** The platform properties against which the run will happen. */
    platform?: PlatformProperties;
    /** The machine configuration of the run agent. */
    agentConfiguration?: AgentProperties;
    /** The scope of the credentials that were used to login to the source registry during this run. */
    sourceRegistryAuth?: string;
    /** The list of custom registries that were logged in during this run. */
    customRegistries?: string[];
    /**
     * The error message received from backend systems after the run is scheduled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runErrorMessage?: string;
    /** The update trigger token passed for the Run. */
    updateTriggerToken?: string;
    /**
     * The image description for the log artifact.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly logArtifact?: ImageDescriptor;
    /** The provisioning state of a run. */
    provisioningState?: ProvisioningState;
    /** The value that indicates whether archiving is enabled or not. */
    isArchiveEnabled?: boolean;
};

/** Properties that are enabled for Odata querying on runs. */
export declare interface RunFilter {
    /** The unique identifier for the run. */
    runId?: string;
    /** The type of run. */
    runType?: RunType;
    /** The current status of the run. */
    status?: RunStatus;
    /** The create time for a run. */
    createTime?: Date;
    /** The time the run finished. */
    finishTime?: Date;
    /**
     * The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of
     * build type.
     */
    outputImageManifests?: string;
    /** The value that indicates whether archiving is enabled or not. */
    isArchiveEnabled?: boolean;
    /** The name of the task that the run corresponds to. */
    taskName?: string;
    /** The name of the agent pool that the run corresponds to. */
    agentPoolName?: string;
}

/** The result of get log link operation. */
export declare interface RunGetLogResult {
    /** The link to logs for a run on a azure container registry. */
    logLink?: string;
    /** The link to logs in registry for a run on a azure container registry. */
    logArtifactLink?: string;
}

/** Collection of runs. */
export declare interface RunListResult {
    /** The collection value. */
    value?: Run[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** The request parameters for scheduling a run. */
export declare interface RunRequest {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "DockerBuildRequest" | "FileTaskRunRequest" | "TaskRunRequest" | "EncodedTaskRunRequest";
    /** The value that indicates whether archiving is enabled for the run or not. */
    isArchiveEnabled?: boolean;
    /** The dedicated agent pool for the run. */
    agentPoolName?: string;
    /** The template that describes the repository and tag information for run log artifact. */
    logTemplate?: string;
}

export declare type RunRequestUnion = RunRequest | DockerBuildRequest | FileTaskRunRequest | TaskRunRequest | EncodedTaskRunRequest;

/** Interface representing a Runs. */
export declare interface Runs {
    /**
     * Gets all the runs for a registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: RunsListOptionalParams): PagedAsyncIterableIterator<Run>;
    /**
     * Gets the detailed information for a given run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, runId: string, options?: RunsGetOptionalParams): Promise<RunsGetResponse>;
    /**
     * Patch the run properties.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param runUpdateParameters The run update properties.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, runId: string, runUpdateParameters: RunUpdateParameters, options?: RunsUpdateOptionalParams): Promise<PollerLike<PollOperationState<RunsUpdateResponse>, RunsUpdateResponse>>;
    /**
     * Patch the run properties.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param runUpdateParameters The run update properties.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, runId: string, runUpdateParameters: RunUpdateParameters, options?: RunsUpdateOptionalParams): Promise<RunsUpdateResponse>;
    /**
     * Gets a link to download the run logs.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    getLogSasUrl(resourceGroupName: string, registryName: string, runId: string, options?: RunsGetLogSasUrlOptionalParams): Promise<RunsGetLogSasUrlResponse>;
    /**
     * Cancel an existing run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    beginCancel(resourceGroupName: string, registryName: string, runId: string, options?: RunsCancelOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Cancel an existing run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param runId The run ID.
     * @param options The options parameters.
     */
    beginCancelAndWait(resourceGroupName: string, registryName: string, runId: string, options?: RunsCancelOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface RunsCancelOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface RunsGetLogSasUrlOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getLogSasUrl operation. */
export declare type RunsGetLogSasUrlResponse = RunGetLogResult;

/** Optional parameters. */
export declare interface RunsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RunsGetResponse = Run;

/** Optional parameters. */
export declare interface RunsListNextOptionalParams extends coreClient.OperationOptions {
    /** The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. */
    filter?: string;
    /** $top is supported for get list of runs, which limits the maximum number of runs to return. */
    top?: number;
}

/** Contains response data for the listNext operation. */
export declare type RunsListNextResponse = RunListResult;

/** Optional parameters. */
export declare interface RunsListOptionalParams extends coreClient.OperationOptions {
    /** The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. */
    filter?: string;
    /** $top is supported for get list of runs, which limits the maximum number of runs to return. */
    top?: number;
}

/** Contains response data for the list operation. */
export declare type RunsListResponse = RunListResult;

/**
 * Defines values for RunStatus. \
 * {@link KnownRunStatus} can be used interchangeably with RunStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queued** \
 * **Started** \
 * **Running** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Error** \
 * **Timeout**
 */
export declare type RunStatus = string;

/** Optional parameters. */
export declare interface RunsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type RunsUpdateResponse = Run;

/**
 * Defines values for RunType. \
 * {@link KnownRunType} can be used interchangeably with RunType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuickBuild** \
 * **QuickRun** \
 * **AutoBuild** \
 * **AutoRun**
 */
export declare type RunType = string;

/** The set of run properties that can be updated. */
export declare interface RunUpdateParameters {
    /** The value that indicates whether archiving is enabled or not. */
    isArchiveEnabled?: boolean;
}

/** Describes the properties of a secret object value. */
export declare interface SecretObject {
    /**
     * The value of the secret. The format of this value will be determined
     * based on the type of the secret object. If the type is Opaque, the value will be
     * used as is without any modification.
     */
    value?: string;
    /**
     * The type of the secret object which determines how the value of the secret object has to be
     * interpreted.
     */
    type?: SecretObjectType;
}

/**
 * Defines values for SecretObjectType. \
 * {@link KnownSecretObjectType} can be used interchangeably with SecretObjectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Opaque** \
 * **Vaultsecret**
 */
export declare type SecretObjectType = string;

/** The properties of a overridable value that can be passed to a task template. */
export declare interface SetValue {
    /** The name of the overridable value. */
    name: string;
    /** The overridable value. */
    value: string;
    /** Flag to indicate whether the value represents a secret or not. */
    isSecret?: boolean;
}

/** The SKU of a container registry. */
export declare interface Sku {
    /** The SKU name of the container registry. Required for registry creation. */
    name: SkuName;
    /**
     * The SKU tier based on the SKU name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tier?: SkuTier;
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Classic** \
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export declare type SkuName = string;

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Classic** \
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export declare type SkuTier = string;

/** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
export declare interface Source {
    /** The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port. */
    addr?: string;
    /** The running instance of an application. Changes after each restart. */
    instanceID?: string;
}

/**
 * Defines values for SourceControlType. \
 * {@link KnownSourceControlType} can be used interchangeably with SourceControlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Github** \
 * **VisualStudioTeamService**
 */
export declare type SourceControlType = string;

/** The properties of the source code repository. */
export declare interface SourceProperties {
    /** The type of source control service. */
    sourceControlType: SourceControlType;
    /** The full URL to the source code repository */
    repositoryUrl: string;
    /** The branch name of the source code. */
    branch?: string;
    /**
     * The authorization properties for accessing the source code repository and to set up
     * webhooks for notifications.
     */
    sourceControlAuthProperties?: AuthInfo;
}

/** Describes the credential parameters for accessing the source registry. */
export declare interface SourceRegistryCredentials {
    /**
     * The authentication mode which determines the source registry login scope. The credentials for the source registry
     * will be generated using the given scope. These credentials will be used to login to
     * the source registry during the run.
     */
    loginMode?: SourceRegistryLoginMode;
}

/**
 * Defines values for SourceRegistryLoginMode. \
 * {@link KnownSourceRegistryLoginMode} can be used interchangeably with SourceRegistryLoginMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Default**
 */
export declare type SourceRegistryLoginMode = string;

/** The properties of a source based trigger. */
export declare interface SourceTrigger {
    /** The properties that describes the source(code) for the task. */
    sourceRepository: SourceProperties;
    /** The source event corresponding to the trigger. */
    sourceTriggerEvents: SourceTriggerEvent[];
    /** The current status of trigger. */
    status?: TriggerStatus;
    /** The name of the trigger. */
    name: string;
}

/** The source trigger that caused a run. */
export declare interface SourceTriggerDescriptor {
    /** The unique ID of the trigger. */
    id?: string;
    /** The event type of the trigger. */
    eventType?: string;
    /** The unique ID that identifies a commit. */
    commitId?: string;
    /** The unique ID that identifies pull request. */
    pullRequestId?: string;
    /** The repository URL. */
    repositoryUrl?: string;
    /** The branch name in the repository. */
    branchName?: string;
    /** The source control provider type. */
    providerType?: string;
}

/**
 * Defines values for SourceTriggerEvent. \
 * {@link KnownSourceTriggerEvent} can be used interchangeably with SourceTriggerEvent,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **commit** \
 * **pullrequest**
 */
export declare type SourceTriggerEvent = string;

/** The properties for updating a source based trigger. */
export declare interface SourceTriggerUpdateParameters {
    /** The properties that describes the source(code) for the task. */
    sourceRepository?: SourceUpdateParameters;
    /** The source event corresponding to the trigger. */
    sourceTriggerEvents?: SourceTriggerEvent[];
    /** The current status of trigger. */
    status?: TriggerStatus;
    /** The name of the trigger. */
    name: string;
}

/** The properties for updating the source code repository. */
export declare interface SourceUpdateParameters {
    /** The type of source control service. */
    sourceControlType?: SourceControlType;
    /** The full URL to the source code repository */
    repositoryUrl?: string;
    /** The branch name of the source code. */
    branch?: string;
    /**
     * The authorization properties for accessing the source code repository and to set up
     * webhooks for notifications.
     */
    sourceControlAuthProperties?: AuthInfoUpdateParameters;
}

/** The properties of a response to source upload request. */
export declare interface SourceUploadDefinition {
    /** The URL where the client can upload the source. */
    uploadUrl?: string;
    /** The relative path to the source. This is used to submit the subsequent queue build request. */
    relativePath?: string;
}

/** The status of an Azure resource at the time the operation was called. */
export declare interface Status {
    /**
     * The short label for the status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayStatus?: string;
    /**
     * The detailed message for the status, including alerts and error messages.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The timestamp when the status was changed to the current value.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly timestamp?: Date;
}

/**
 * Defines values for StepType. \
 * {@link KnownStepType} can be used interchangeably with StepType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Docker** \
 * **FileTask** \
 * **EncodedTask**
 */
export declare type StepType = string;

/** The properties of a storage account for a container registry. Only applicable to Classic SKU. */
export declare interface StorageAccountProperties {
    /** The resource ID of the storage account. */
    id: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: LastModifiedByType;
    /** The timestamp of resource modification (UTC). */
    lastModifiedAt?: Date;
}

/** The target of the event. */
export declare interface Target {
    /** The MIME type of the referenced object. */
    mediaType?: string;
    /** The number of bytes of the content. Same as Length field. */
    size?: number;
    /** The digest of the content, as defined by the Registry V2 HTTP API Specification. */
    digest?: string;
    /** The number of bytes of the content. Same as Size field. */
    length?: number;
    /** The repository name. */
    repository?: string;
    /** The direct URL to the content. */
    url?: string;
    /** The tag name. */
    tag?: string;
    /** The name of the artifact. */
    name?: string;
    /** The version of the artifact. */
    version?: string;
}

/**
 * The task that has the ARM resource and task properties.
 * The task will have all information to schedule a run against it.
 */
export declare type Task = Resource & {
    /** Identity for the resource. */
    identity?: IdentityProperties;
    /**
     * The provisioning state of the task.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /**
     * The creation date of task.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /** The current status of task. */
    status?: TaskStatus;
    /** The platform properties against which the run has to happen. */
    platform?: PlatformProperties;
    /** The machine configuration of the run agent. */
    agentConfiguration?: AgentProperties;
    /** The dedicated agent pool for the task. */
    agentPoolName?: string;
    /** Run timeout in seconds. */
    timeout?: number;
    /** The properties of a task step. */
    step?: TaskStepPropertiesUnion;
    /** The properties that describe all triggers for the task. */
    trigger?: TriggerProperties;
    /** The properties that describes a set of credentials that will be used when this run is invoked. */
    credentials?: Credentials;
    /** The template that describes the repository and tag information for run log artifact. */
    logTemplate?: string;
    /** The value of this property indicates whether the task resource is system task or not. */
    isSystemTask?: boolean;
};

/** The collection of tasks. */
export declare interface TaskListResult {
    /** The collection value. */
    value?: Task[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/**
 * The task run that has the ARM resource and properties.
 * The task run will have the information of request and result of a run.
 */
export declare type TaskRun = ProxyResource & {
    /** Identity for the resource. */
    identity?: IdentityProperties;
    /** The location of the resource */
    location?: string;
    /**
     * The provisioning state of this task run
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The request (parameters) for the run */
    runRequest?: RunRequestUnion;
    /**
     * The result of this task run
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly runResult?: Run;
    /** How the run should be forced to rerun even if the run request configuration has not changed */
    forceUpdateTag?: string;
};

/** The collection of task runs. */
export declare interface TaskRunListResult {
    /** The collection value. */
    value?: TaskRun[];
    /** The URI that can be used to request the next set of paged results. */
    nextLink?: string;
}

/** The parameters for a task run request. */
export declare type TaskRunRequest = RunRequest & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "TaskRunRequest";
    /** The resource ID of task against which run has to be queued. */
    taskId: string;
    /** Set of overridable parameters that can be passed when running a Task. */
    overrideTaskStepProperties?: OverrideTaskStepProperties;
};

/** Interface representing a TaskRuns. */
export declare interface TaskRuns {
    /**
     * Lists all the task runs for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: TaskRunsListOptionalParams): PagedAsyncIterableIterator<TaskRun>;
    /**
     * Gets the detailed information for a given task run.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, taskRunName: string, options?: TaskRunsGetOptionalParams): Promise<TaskRunsGetResponse>;
    /**
     * Creates a task run for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param taskRun The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, registryName: string, taskRunName: string, taskRun: TaskRun, options?: TaskRunsCreateOptionalParams): Promise<PollerLike<PollOperationState<TaskRunsCreateResponse>, TaskRunsCreateResponse>>;
    /**
     * Creates a task run for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param taskRun The parameters of a run that needs to scheduled.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, registryName: string, taskRunName: string, taskRun: TaskRun, options?: TaskRunsCreateOptionalParams): Promise<TaskRunsCreateResponse>;
    /**
     * Deletes a specified task run resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, registryName: string, taskRunName: string, options?: TaskRunsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a specified task run resource.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, registryName: string, taskRunName: string, options?: TaskRunsDeleteOptionalParams): Promise<void>;
    /**
     * Updates a task run with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param updateParameters The parameters for updating a task run.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, taskRunName: string, updateParameters: TaskRunUpdateParameters, options?: TaskRunsUpdateOptionalParams): Promise<PollerLike<PollOperationState<TaskRunsUpdateResponse>, TaskRunsUpdateResponse>>;
    /**
     * Updates a task run with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param updateParameters The parameters for updating a task run.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, taskRunName: string, updateParameters: TaskRunUpdateParameters, options?: TaskRunsUpdateOptionalParams): Promise<TaskRunsUpdateResponse>;
    /**
     * Gets the detailed information for a given task run that includes all secrets.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskRunName The name of the task run.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName: string, registryName: string, taskRunName: string, options?: TaskRunsGetDetailsOptionalParams): Promise<TaskRunsGetDetailsResponse>;
}

/** Optional parameters. */
export declare interface TaskRunsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type TaskRunsCreateResponse = TaskRun;

/** Optional parameters. */
export declare interface TaskRunsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TaskRunsGetDetailsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDetails operation. */
export declare type TaskRunsGetDetailsResponse = TaskRun;

/** Optional parameters. */
export declare interface TaskRunsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TaskRunsGetResponse = TaskRun;

/** Optional parameters. */
export declare interface TaskRunsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TaskRunsListNextResponse = TaskRunListResult;

/** Optional parameters. */
export declare interface TaskRunsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TaskRunsListResponse = TaskRunListResult;

/** Optional parameters. */
export declare interface TaskRunsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type TaskRunsUpdateResponse = TaskRun;

/** The parameters for updating a task run. */
export declare interface TaskRunUpdateParameters {
    /** Identity for the resource. */
    identity?: IdentityProperties;
    /** The location of the resource */
    location?: string;
    /** The ARM resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The request (parameters) for the new run */
    runRequest?: RunRequestUnion;
    /** How the run should be forced to rerun even if the run request configuration has not changed */
    forceUpdateTag?: string;
}

/** Interface representing a Tasks. */
export declare interface Tasks {
    /**
     * Lists all the tasks for a specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: TasksListOptionalParams): PagedAsyncIterableIterator<Task>;
    /**
     * Get the properties of a specified task.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, taskName: string, options?: TasksGetOptionalParams): Promise<TasksGetResponse>;
    /**
     * Creates a task for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskCreateParameters The parameters for creating a task.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, registryName: string, taskName: string, taskCreateParameters: Task, options?: TasksCreateOptionalParams): Promise<PollerLike<PollOperationState<TasksCreateResponse>, TasksCreateResponse>>;
    /**
     * Creates a task for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskCreateParameters The parameters for creating a task.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, registryName: string, taskName: string, taskCreateParameters: Task, options?: TasksCreateOptionalParams): Promise<TasksCreateResponse>;
    /**
     * Deletes a specified task.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, registryName: string, taskName: string, options?: TasksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a specified task.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, registryName: string, taskName: string, options?: TasksDeleteOptionalParams): Promise<void>;
    /**
     * Updates a task with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskUpdateParameters The parameters for updating a task.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, taskName: string, taskUpdateParameters: TaskUpdateParameters, options?: TasksUpdateOptionalParams): Promise<PollerLike<PollOperationState<TasksUpdateResponse>, TasksUpdateResponse>>;
    /**
     * Updates a task with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param taskUpdateParameters The parameters for updating a task.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, taskName: string, taskUpdateParameters: TaskUpdateParameters, options?: TasksUpdateOptionalParams): Promise<TasksUpdateResponse>;
    /**
     * Returns a task with extended information that includes all secrets.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param taskName The name of the container registry task.
     * @param options The options parameters.
     */
    getDetails(resourceGroupName: string, registryName: string, taskName: string, options?: TasksGetDetailsOptionalParams): Promise<TasksGetDetailsResponse>;
}

/** Optional parameters. */
export declare interface TasksCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type TasksCreateResponse = Task;

/** Optional parameters. */
export declare interface TasksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface TasksGetDetailsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getDetails operation. */
export declare type TasksGetDetailsResponse = Task;

/** Optional parameters. */
export declare interface TasksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type TasksGetResponse = Task;

/** Optional parameters. */
export declare interface TasksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type TasksListNextResponse = TaskListResult;

/** Optional parameters. */
export declare interface TasksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type TasksListResponse = TaskListResult;

/**
 * Defines values for TaskStatus. \
 * {@link KnownTaskStatus} can be used interchangeably with TaskStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export declare type TaskStatus = string;

/** Base properties for any task step. */
export declare interface TaskStepProperties {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Docker" | "FileTask" | "EncodedTask";
    /**
     * List of base image dependencies for a step.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly baseImageDependencies?: BaseImageDependency[];
    /** The URL(absolute or relative) of the source context for the task step. */
    contextPath?: string;
    /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */
    contextAccessToken?: string;
}

export declare type TaskStepPropertiesUnion = TaskStepProperties | DockerBuildStep | FileTaskStep | EncodedTaskStep;

/** Base properties for updating any task step. */
export declare interface TaskStepUpdateParameters {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Docker" | "FileTask" | "EncodedTask";
    /** The URL(absolute or relative) of the source context for the task step. */
    contextPath?: string;
    /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */
    contextAccessToken?: string;
}

export declare type TaskStepUpdateParametersUnion = TaskStepUpdateParameters | DockerBuildStepUpdateParameters | FileTaskStepUpdateParameters | EncodedTaskStepUpdateParameters;

/** Optional parameters. */
export declare interface TasksUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type TasksUpdateResponse = Task;

/** The parameters for updating a task. */
export declare interface TaskUpdateParameters {
    /** Identity for the resource. */
    identity?: IdentityProperties;
    /** The ARM resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The current status of task. */
    status?: TaskStatus;
    /** The platform properties against which the run has to happen. */
    platform?: PlatformUpdateParameters;
    /** The machine configuration of the run agent. */
    agentConfiguration?: AgentProperties;
    /** The dedicated agent pool for the task. */
    agentPoolName?: string;
    /** Run timeout in seconds. */
    timeout?: number;
    /** The properties for updating a task step. */
    step?: TaskStepUpdateParametersUnion;
    /** The properties for updating trigger properties. */
    trigger?: TriggerUpdateParameters;
    /** The parameters that describes a set of credentials that will be used when this run is invoked. */
    credentials?: Credentials;
    /** The template that describes the repository and tag information for run log artifact. */
    logTemplate?: string;
}

/** The properties of a timer trigger. */
export declare interface TimerTrigger {
    /** The CRON expression for the task schedule */
    schedule: string;
    /** The current status of trigger. */
    status?: TriggerStatus;
    /** The name of the trigger. */
    name: string;
}

export declare interface TimerTriggerDescriptor {
    /** The timer trigger name that caused the run. */
    timerTriggerName?: string;
    /** The occurrence that triggered the run. */
    scheduleOccurrence?: string;
}

/** The properties for updating a timer trigger. */
export declare interface TimerTriggerUpdateParameters {
    /** The CRON expression for the task schedule */
    schedule?: string;
    /** The current status of trigger. */
    status?: TriggerStatus;
    /** The name of the trigger. */
    name: string;
}

/**
 * Defines values for TokenType. \
 * {@link KnownTokenType} can be used interchangeably with TokenType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PAT** \
 * **OAuth**
 */
export declare type TokenType = string;

/** The properties of a trigger. */
export declare interface TriggerProperties {
    /** The collection of timer triggers. */
    timerTriggers?: TimerTrigger[];
    /** The collection of triggers based on source code repository. */
    sourceTriggers?: SourceTrigger[];
    /** The trigger based on base image dependencies. */
    baseImageTrigger?: BaseImageTrigger;
}

/**
 * Defines values for TriggerStatus. \
 * {@link KnownTriggerStatus} can be used interchangeably with TriggerStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export declare type TriggerStatus = string;

/** The properties for updating triggers. */
export declare interface TriggerUpdateParameters {
    /** The collection of timer triggers. */
    timerTriggers?: TimerTriggerUpdateParameters[];
    /** The collection of triggers based on source code repository. */
    sourceTriggers?: SourceTriggerUpdateParameters[];
    /** The trigger based on base image dependencies. */
    baseImageTrigger?: BaseImageTriggerUpdateParameters;
}

/** The content trust policy for a container registry. */
export declare interface TrustPolicy {
    /** The type of trust policy. */
    type?: TrustPolicyType;
    /** The value that indicates whether the policy is enabled or not. */
    status?: PolicyStatus;
}

/**
 * Defines values for TrustPolicyType. \
 * {@link KnownTrustPolicyType} can be used interchangeably with TrustPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Notary**
 */
export declare type TrustPolicyType = string;

/**
 * Defines values for UpdateTriggerPayloadType. \
 * {@link KnownUpdateTriggerPayloadType} can be used interchangeably with UpdateTriggerPayloadType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Token**
 */
export declare type UpdateTriggerPayloadType = string;

export declare interface UserIdentityProperties {
    /** The principal id of user assigned identity. */
    principalId?: string;
    /** The client id of user assigned identity. */
    clientId?: string;
}

/**
 * Defines values for Variant. \
 * {@link KnownVariant} can be used interchangeably with Variant,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **v6** \
 * **v7** \
 * **v8**
 */
export declare type Variant = string;

/** An object that represents a webhook for a container registry. */
export declare type Webhook = Resource & {
    /** The status of the webhook at the time the operation was called. */
    status?: WebhookStatus;
    /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */
    scope?: string;
    /** The list of actions that trigger the webhook to post notifications. */
    actions?: WebhookAction[];
    /**
     * The provisioning state of the webhook at the time the operation was called.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
};

/**
 * Defines values for WebhookAction. \
 * {@link KnownWebhookAction} can be used interchangeably with WebhookAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **push** \
 * **delete** \
 * **quarantine** \
 * **chart_push** \
 * **chart_delete**
 */
export declare type WebhookAction = string;

/** The parameters for creating a webhook. */
export declare interface WebhookCreateParameters {
    /** The tags for the webhook. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The location of the webhook. This cannot be changed after the resource is created. */
    location: string;
    /** The service URI for the webhook to post notifications. */
    serviceUri?: string;
    /** Custom headers that will be added to the webhook notifications. */
    customHeaders?: {
        [propertyName: string]: string;
    };
    /** The status of the webhook at the time the operation was called. */
    status?: WebhookStatus;
    /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */
    scope?: string;
    /** The list of actions that trigger the webhook to post notifications. */
    actions?: WebhookAction[];
}

/** The result of a request to list webhooks for a container registry. */
export declare interface WebhookListResult {
    /** The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks. */
    value?: Webhook[];
    /** The URI that can be used to request the next list of webhooks. */
    nextLink?: string;
}

/** Interface representing a Webhooks. */
export declare interface Webhooks {
    /**
     * Lists all the webhooks for the specified container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, registryName: string, options?: WebhooksListOptionalParams): PagedAsyncIterableIterator<Webhook>;
    /**
     * Lists recent events for the specified webhook.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    listEvents(resourceGroupName: string, registryName: string, webhookName: string, options?: WebhooksListEventsOptionalParams): PagedAsyncIterableIterator<Event_2>;
    /**
     * Gets the properties of the specified webhook.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, registryName: string, webhookName: string, options?: WebhooksGetOptionalParams): Promise<WebhooksGetResponse>;
    /**
     * Creates a webhook for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookCreateParameters The parameters for creating a webhook.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: WebhookCreateParameters, options?: WebhooksCreateOptionalParams): Promise<PollerLike<PollOperationState<WebhooksCreateResponse>, WebhooksCreateResponse>>;
    /**
     * Creates a webhook for a container registry with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookCreateParameters The parameters for creating a webhook.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, registryName: string, webhookName: string, webhookCreateParameters: WebhookCreateParameters, options?: WebhooksCreateOptionalParams): Promise<WebhooksCreateResponse>;
    /**
     * Deletes a webhook from a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, registryName: string, webhookName: string, options?: WebhooksDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a webhook from a container registry.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, registryName: string, webhookName: string, options?: WebhooksDeleteOptionalParams): Promise<void>;
    /**
     * Updates a webhook with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookUpdateParameters The parameters for updating a webhook.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: WebhookUpdateParameters, options?: WebhooksUpdateOptionalParams): Promise<PollerLike<PollOperationState<WebhooksUpdateResponse>, WebhooksUpdateResponse>>;
    /**
     * Updates a webhook with the specified parameters.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param webhookUpdateParameters The parameters for updating a webhook.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, registryName: string, webhookName: string, webhookUpdateParameters: WebhookUpdateParameters, options?: WebhooksUpdateOptionalParams): Promise<WebhooksUpdateResponse>;
    /**
     * Triggers a ping event to be sent to the webhook.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    ping(resourceGroupName: string, registryName: string, webhookName: string, options?: WebhooksPingOptionalParams): Promise<WebhooksPingResponse>;
    /**
     * Gets the configuration of service URI and custom headers for the webhook.
     * @param resourceGroupName The name of the resource group to which the container registry belongs.
     * @param registryName The name of the container registry.
     * @param webhookName The name of the webhook.
     * @param options The options parameters.
     */
    getCallbackConfig(resourceGroupName: string, registryName: string, webhookName: string, options?: WebhooksGetCallbackConfigOptionalParams): Promise<WebhooksGetCallbackConfigResponse>;
}

/** Optional parameters. */
export declare interface WebhooksCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type WebhooksCreateResponse = Webhook;

/** Optional parameters. */
export declare interface WebhooksDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WebhooksGetCallbackConfigOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getCallbackConfig operation. */
export declare type WebhooksGetCallbackConfigResponse = CallbackConfig;

/** Optional parameters. */
export declare interface WebhooksGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WebhooksGetResponse = Webhook;

/** Optional parameters. */
export declare interface WebhooksListEventsNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEventsNext operation. */
export declare type WebhooksListEventsNextResponse = EventListResult;

/** Optional parameters. */
export declare interface WebhooksListEventsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listEvents operation. */
export declare type WebhooksListEventsResponse = EventListResult;

/** Optional parameters. */
export declare interface WebhooksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WebhooksListNextResponse = WebhookListResult;

/** Optional parameters. */
export declare interface WebhooksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WebhooksListResponse = WebhookListResult;

/** Optional parameters. */
export declare interface WebhooksPingOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the ping operation. */
export declare type WebhooksPingResponse = EventInfo;

/**
 * Defines values for WebhookStatus. \
 * {@link KnownWebhookStatus} can be used interchangeably with WebhookStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export declare type WebhookStatus = string;

/** Optional parameters. */
export declare interface WebhooksUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type WebhooksUpdateResponse = Webhook;

/** The parameters for updating a webhook. */
export declare interface WebhookUpdateParameters {
    /** The tags for the webhook. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The service URI for the webhook to post notifications. */
    serviceUri?: string;
    /** Custom headers that will be added to the webhook notifications. */
    customHeaders?: {
        [propertyName: string]: string;
    };
    /** The status of the webhook at the time the operation was called. */
    status?: WebhookStatus;
    /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */
    scope?: string;
    /** The list of actions that trigger the webhook to post notifications. */
    actions?: WebhookAction[];
}

/**
 * Defines values for ZoneRedundancy. \
 * {@link KnownZoneRedundancy} can be used interchangeably with ZoneRedundancy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ZoneRedundancy = string;

export { }
