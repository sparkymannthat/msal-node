{"version":3,"file":"registryArtifact.js","sourceRoot":"","sources":["../../src/registryArtifact.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { OperationOptions } from \"@azure/core-client\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nimport {\n  ArtifactTagProperties,\n  ArtifactManifestProperties,\n  ArtifactTagOrder,\n  TagPageResponse,\n} from \"./models\";\nimport { URL } from \"./utils/url\";\nimport { createSpan } from \"./tracing\";\nimport { GeneratedClient } from \"./generated\";\nimport { extractNextLink, isDigest } from \"./utils/helpers\";\nimport { toArtifactManifestProperties, toServiceTagOrderBy } from \"./transformations\";\n\n/**\n * Options for the `delete` method of `RegistryArtifact`.\n */\nexport interface DeleteArtifactOptions extends OperationOptions {}\n/**\n * Options for the `deleteTag` method of `RegistryArtifact`.\n */\nexport interface DeleteTagOptions extends OperationOptions {}\n/**\n * Options for the `getManifestProperties` method of `RegistryArtifact`.\n */\nexport interface GetManifestPropertiesOptions extends OperationOptions {}\n/**\n * Options for the `getTagProperties` method of `RegistryArtifact`.\n */\nexport interface GetTagPropertiesOptions extends OperationOptions {}\n\n/**\n * Options for the `updateTagProperties` method of `RegistryArtifact`.\n */\nexport interface UpdateTagPropertiesOptions extends OperationOptions {\n  /** Whether or not this tag can be deleted */\n  canDelete?: boolean;\n  /** Whether or not this tag can be written to */\n  canWrite?: boolean;\n  /** Whether or not to include this tag when listing tags */\n  canList?: boolean;\n  /** Whether or not this tag can be read */\n  canRead?: boolean;\n}\n\n/**\n * Options for the `updateManifestProperties` method of `RegistryArtifact`.\n */\nexport interface UpdateManifestPropertiesOptions extends OperationOptions {\n  /** Whether or not this manifest can be deleted */\n  canDelete?: boolean;\n  /** Whether or not this manifest can be written to */\n  canWrite?: boolean;\n  /** Whether or not to include this manifest when listing manifest properties */\n  canList?: boolean;\n  /** Whether or not this manifest can be read */\n  canRead?: boolean;\n}\n\n/**\n * Options for the `listTagProperties` method of `RegistryArtifact`.\n */\nexport interface ListTagPropertiesOptions extends OperationOptions {\n  /** order in which the tags are returned */\n  order?: ArtifactTagOrder;\n}\n\n/**\n * `Artifact` is the general term for items stored in a container registry,\n * and can include Docker images or other Open Container Initiative (OCI) artifact types.\n *\n * The {@link RegistryArtifact} interface is a helper that groups information and operations about an image\n * or artifact in a container registry.\n *\n */\nexport interface RegistryArtifact {\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  readonly registryEndpoint: string;\n  /**\n   * Repository name.\n   */\n  readonly repositoryName: string;\n  /**\n   * fully qualified reference of the artifact.\n   */\n  readonly fullyQualifiedReference: string;\n  /**\n   * Deletes this registry artifact by deleting its manifest.\n   * @param options -\n   */\n  delete(options?: DeleteArtifactOptions): Promise<void>;\n  /**\n   * Deletes a tag. This removes the tag from the artifact and its manifest.\n   * @param tag - the name of the tag to delete.\n   * @param options -\n   */\n  deleteTag(tag: string, options?: DeleteTagOptions): Promise<void>;\n  /**\n   * Retrieves the properties of the manifest that uniquely identifies this artifact.\n   * @param options -\n   */\n  getManifestProperties(\n    options?: GetManifestPropertiesOptions\n  ): Promise<ArtifactManifestProperties>;\n  /**\n   * Updates the properties of the artifact's manifest.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateManifestProperties({\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param options -\n   */\n  updateManifestProperties(\n    options: UpdateManifestPropertiesOptions\n  ): Promise<ArtifactManifestProperties>;\n  /**\n   * Retrieves the properties of the specified tag.\n   * @param tag - the tag to retrieve properties.\n   * @param options -\n   */\n  getTagProperties(tag: string, options?: GetTagPropertiesOptions): Promise<ArtifactTagProperties>;\n  /**\n   * Updates the properties of a given tag.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateTagProperties(tag, {\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param tag - name of the tag to update properties on\n   * @param options -\n   */\n  updateTagProperties(\n    tag: string,\n    options: UpdateTagPropertiesOptions\n  ): Promise<ArtifactTagProperties>;\n  /**\n   * Returns an async iterable iterator to list the tags that uniquely identify this artifact and the properties of each.\n   *\n   * Example using `for-await-of` syntax:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credentials);\n   * const repository = client.getRepository(repositoryName);\n   * const artifact = repository.getArtifact(digest)\n   * for await (const tag of artifact.listTagProperties()) {\n   *   console.log(\"tag: \", tag);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * const iter = artifact.listTagProperties();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(\"tag properties: \", item.value);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = artifact.listTagProperties().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const tagProperties of page.value) {\n   *      console.log(`  repository name: ${tagProperties}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  listTagProperties(\n    options?: ListTagPropertiesOptions\n  ): PagedAsyncIterableIterator<ArtifactTagProperties>;\n}\n\n/**\n * The client class used to interact with the Container Registry service.\n * @internal\n */\nexport class RegistryArtifactImpl {\n  private client: GeneratedClient;\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  public readonly registryEndpoint: string;\n  /**\n   * Repository name.\n   */\n  public readonly repositoryName: string;\n\n  /**\n   * Name of the form 'registry-login-server/repository-name\\@digest' or\n   *   'registry-login-server/repository-name:tag'\n   */\n  public readonly fullyQualifiedReference: string;\n\n  private digest?: string;\n  /**\n   * Creates an instance of a RegistryArtifact.\n   * @param registryEndpoint - the URL to the Container Registry endpoint\n   * @param repositoryName - the name of the repository\n   * @param tagOrDigest - the tag or digest of this artifact\n   * @param client - the generated client that interacts with service\n   */\n  constructor(\n    registryEndpoint: string,\n    repositoryName: string,\n    private tagOrDigest: string,\n    client: GeneratedClient\n  ) {\n    this.registryEndpoint = registryEndpoint;\n    this.repositoryName = repositoryName;\n\n    const parsedUrl = new URL(registryEndpoint);\n    if (isDigest(tagOrDigest)) {\n      this.digest = tagOrDigest;\n      this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}@${this.digest}`;\n    } else {\n      this.fullyQualifiedReference = `${parsedUrl.hostname}/${repositoryName}:${tagOrDigest}`;\n    }\n\n    this.client = client;\n  }\n\n  /**\n   * digest of this artifact.\n   */\n  private async getDigest(): Promise<string> {\n    if (this.digest) {\n      return this.digest;\n    }\n\n    if (!isDigest(this.tagOrDigest)) {\n      this.digest = (await this.getTagProperties(this.tagOrDigest)).digest;\n    } else {\n      this.digest = this.tagOrDigest;\n    }\n\n    return this.digest;\n  }\n\n  /**\n   * Deletes this registry artifact by deleting its manifest.\n   * @param options -\n   */\n  public async delete(options: DeleteArtifactOptions = {}): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"RegistryArtifact-delete\", options);\n\n    try {\n      await this.client.containerRegistry.deleteManifest(\n        this.repositoryName,\n        await this.getDigest(),\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a tag. This removes the tag from the artifact and its manifest.\n   * @param tag - the name of the tag to delete.\n   * @param options -\n   */\n  public async deleteTag(tag: string, options: DeleteTagOptions = {}): Promise<void> {\n    if (!tag) {\n      throw new Error(\"invalid tag\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"RegistryArtifact-deleteTag\", options);\n\n    try {\n      await this.client.containerRegistry.deleteTag(this.repositoryName, tag, updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves the properties of the manifest that uniquely identifies this artifact.\n   * @param options -\n   */\n  public async getManifestProperties(\n    options: GetManifestPropertiesOptions = {}\n  ): Promise<ArtifactManifestProperties> {\n    const { span, updatedOptions } = createSpan(\"RegistryArtifact-getManifestProperties\", options);\n\n    try {\n      const result = await this.client.containerRegistry.getManifestProperties(\n        this.repositoryName,\n        await this.getDigest(),\n        updatedOptions\n      );\n      return toArtifactManifestProperties(result, this.repositoryName, result.registryLoginServer!);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates the properties of the artifact's manifest.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateManifestProperties({\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param options -\n   */\n  public async updateManifestProperties(\n    options: UpdateManifestPropertiesOptions\n  ): Promise<ArtifactManifestProperties> {\n    const { span, updatedOptions } = createSpan(\"RegistryArtifact-updateManifestProperties\", {\n      ...options,\n      value: {\n        canDelete: options.canDelete,\n        canWrite: options.canWrite,\n        canList: options.canList,\n        canRead: options.canRead,\n      },\n    });\n\n    try {\n      const result = await this.client.containerRegistry.updateManifestProperties(\n        this.repositoryName,\n        await this.getDigest(),\n        updatedOptions\n      );\n      return toArtifactManifestProperties(result, this.repositoryName, result.registryLoginServer!);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Retrieves the properties of the specified tag.\n   * @param tag - the tag to retrieve properties.\n   * @param options -\n   */\n  public async getTagProperties(\n    tag: string,\n    options: GetTagPropertiesOptions = {}\n  ): Promise<ArtifactTagProperties> {\n    if (!tag) {\n      throw new Error(\"invalid tag\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"RegistryArtifact-getTagProperties\", options);\n    try {\n      return await this.client.containerRegistry.getTagProperties(\n        this.repositoryName,\n        tag,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Updates the properties of a given tag.\n   *\n   * Example usage:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credential);\n   * const artifact = client.getArtifact(repositoryName, artifactTagOrDigest)\n   * const updated = await artifact.updateTagProperties(tag, {\n   *   canDelete: false,\n   *   canList: false,\n   *   canRead: false,\n   *   canWrite: false\n   * });\n   * ```\n   * @param tag - name of the tag to update properties on\n   * @param options -\n   */\n  public async updateTagProperties(\n    tag: string,\n    options: UpdateTagPropertiesOptions\n  ): Promise<ArtifactTagProperties> {\n    if (!tag) {\n      throw new Error(\"invalid tag\");\n    }\n\n    const { span, updatedOptions } = createSpan(\"RegistryArtifact-updateTagProperties\", {\n      ...options,\n      value: {\n        canDelete: options.canDelete,\n        canWrite: options.canWrite,\n        canList: options.canList,\n        canRead: options.canRead,\n      },\n    });\n\n    try {\n      return await this.client.containerRegistry.updateTagAttributes(\n        this.repositoryName,\n        tag,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list the tags that uniquely identify this artifact and the properties of each.\n   *\n   * Example using `for-await-of` syntax:\n   *\n   * ```javascript\n   * const client = new ContainerRegistryClient(url, credentials);\n   * const repository = client.getRepository(repositoryName);\n   * const artifact = repository.getArtifact(digest)\n   * for await (const tag of artifact.listTagProperties()) {\n   *   console.log(\"tag: \", tag);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * const iter = artifact.listTagProperties();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(\"tag properties: \", item.value);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = artifact.listTagProperties().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const tagProperties of page.value) {\n   *      console.log(`  repository name: ${tagProperties}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  public listTagProperties(\n    options: ListTagPropertiesOptions = {}\n  ): PagedAsyncIterableIterator<ArtifactTagProperties, TagPageResponse> {\n    const iter = this.listTagsItems(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listTagsPage(settings, options),\n    };\n  }\n\n  private async *listTagsItems(\n    options: ListTagPropertiesOptions = {}\n  ): AsyncIterableIterator<ArtifactTagProperties> {\n    for await (const page of this.listTagsPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  private async *listTagsPage(\n    continuationState: PageSettings,\n    options: ListTagPropertiesOptions = {}\n  ): AsyncIterableIterator<TagPageResponse> {\n    const orderby = toServiceTagOrderBy(options.order);\n    if (!continuationState.continuationToken) {\n      const optionsComplete = {\n        ...options,\n        n: continuationState.maxPageSize,\n        orderby,\n      };\n      const currentPage = await this.client.containerRegistry.getTags(\n        this.repositoryName,\n        optionsComplete\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.tagAttributeBases) {\n        const array = currentPage.tagAttributeBases.map((t) => {\n          return {\n            registryLoginServer: currentPage.registryLoginServer,\n            repositoryName: currentPage.repository,\n            ...t,\n          };\n        });\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentPage = await this.client.containerRegistry.getTagsNext(\n        this.repositoryName,\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.tagAttributeBases) {\n        const array = currentPage.tagAttributeBases.map((t) => {\n          return {\n            registryLoginServer: currentPage.registryLoginServer,\n            repositoryName: currentPage.repository,\n            ...t,\n          };\n        });\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n  }\n}\n"]}