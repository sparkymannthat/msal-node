{"version":3,"file":"containerRegistryTokenCredential.js","sourceRoot":"","sources":["../../src/containerRegistryTokenCredential.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAM9C,MAAM,OAAO,uCAAuC;IAGlD,YACE,UAA2B,EACnB,mBAA2B,EAC3B,UAA4B;QAD5B,wBAAmB,GAAnB,mBAAmB,CAAQ;QAC3B,eAAU,GAAV,UAAU,CAAkB;QAEpC,IAAI,CAAC,YAAY,GAAG,IAAI,6BAA6B,CAAC,UAAU,CAAC,CAAC;QAClE,IAAI,CAAC,iBAAiB,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;IAC5C,CAAC;IAED,KAAK,CAAC,QAAQ,CACZ,OAA0B,EAC1B,OAAyC;QAEzC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;QACnF,IAAI,CAAC,QAAQ,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;SAClD;QAED,OAAO,IAAI,CAAC,YAAY,CAAC,6CAA6C,CACpE,QAAQ,CAAC,KAAK,EACd,OAAO,CAAC,OAAO,EACf,OAAO,CACR,CAAC;IACJ,CAAC;CACF;AAED,MAAM,OAAO,6BAA6B;IACxC,YAAoB,UAA2B;QAA3B,eAAU,GAAV,UAAU,CAAiB;IAAG,CAAC;IAEnD,KAAK,CAAC,6CAA6C,CACjD,cAAsB,EACtB,OAAe,EACf,OAAwB;QAExB,MAAM,eAAe,GACnB,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,wCAAwC,CAC3E,cAAc,EACd,OAAO,kCAEF,OAAO,KACV,WAAW,EAAE,cAAc,IAE9B,CAAC;QACJ,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;QAED,8CAA8C;QAC9C,MAAM,QAAQ,GAAG,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzD,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;SAClE;QACD,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;SACzC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;SAClE;QAED,2BAA2B;QAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;QACtD,OAAO;YACL,KAAK,EAAE,eAAe,CAAC,YAAY;YACnC,kBAAkB,EAAE,MAAM;SAC3B,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,6CAA6C,CACjD,eAAuB,EACvB,OAAe,EACf,KAAa,EACb,SAAuC,EACvC,OAAwB;QAExB,MAAM,cAAc,GAClB,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,wCAAwC,CAC3E,OAAO,EACP,KAAK,EACL,eAAe,EACf,SAAS,EACT,OAAO,CACR,CAAC;QAEJ,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;SACjF;QACD,OAAO,cAAc,CAAC,WAAW,CAAC;IACpC,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { GeneratedClient } from \"./generated\";\nimport { base64decode } from \"./utils/base64\";\n\nexport interface ContainerRegistryGetTokenOptions extends GetTokenOptions {\n  service: string;\n}\n\nexport class ContainerRegistryRefreshTokenCredential implements TokenCredential {\n  readonly tokenService: ContainerRegistryTokenService;\n  readonly isAnonymousAccess: boolean;\n  constructor(\n    authClient: GeneratedClient,\n    private authenticationScope: string,\n    private credential?: TokenCredential\n  ) {\n    this.tokenService = new ContainerRegistryTokenService(authClient);\n    this.isAnonymousAccess = !this.credential;\n  }\n\n  async getToken(\n    _scopes: string | string[],\n    options: ContainerRegistryGetTokenOptions\n  ): Promise<AccessToken | null> {\n    if (!this.credential) {\n      return null;\n    }\n\n    const aadToken = await this.credential.getToken(this.authenticationScope, options);\n    if (!aadToken) {\n      throw new Error(\"Failed to retrieve AAD token.\");\n    }\n\n    return this.tokenService.ExchangeAadAccessTokenForAcrRefreshTokenAsync(\n      aadToken.token,\n      options.service,\n      options\n    );\n  }\n}\n\nexport class ContainerRegistryTokenService {\n  constructor(private authClient: GeneratedClient) {}\n\n  async ExchangeAadAccessTokenForAcrRefreshTokenAsync(\n    aadAccessToken: string,\n    service: string,\n    options: GetTokenOptions\n  ): Promise<AccessToken> {\n    const acrRefreshToken =\n      await this.authClient.authentication.exchangeAadAccessTokenForAcrRefreshToken(\n        \"access_token\",\n        service,\n        {\n          ...options,\n          accessToken: aadAccessToken,\n        }\n      );\n    if (!acrRefreshToken.refreshToken) {\n      throw new Error(\"Failed to exchange AAD access token for an ACR refresh token.\");\n    }\n\n    // ACR refresh token expires after three hours\n    const jwtParts = acrRefreshToken.refreshToken.split(\".\");\n    if (jwtParts.length < 3) {\n      throw new Error(\"Invalid JWT structure from ACR refresh token.\");\n    }\n    if (!jwtParts[1]) {\n      throw new Error(\"Invalid JWT payload.\");\n    }\n\n    const jwtPayload = JSON.parse(base64decode(jwtParts[1]));\n    if (!jwtPayload.exp) {\n      throw new Error(\"Invalid JWT payload structure. No expiration.\");\n    }\n\n    // JWT expiry is in seconds\n    const expiry = Number.parseInt(jwtPayload.exp) * 1000;\n    return {\n      token: acrRefreshToken.refreshToken,\n      expiresOnTimestamp: expiry,\n    };\n  }\n\n  async ExchangeAcrRefreshTokenForAcrAccessTokenAsync(\n    acrRefreshToken: string,\n    service: string,\n    scope: string,\n    grantType: \"refresh_token\" | \"password\",\n    options: GetTokenOptions\n  ): Promise<string> {\n    const acrAccessToken =\n      await this.authClient.authentication.exchangeAcrRefreshTokenForAcrAccessToken(\n        service,\n        scope,\n        acrRefreshToken,\n        grantType,\n        options\n      );\n\n    if (!acrAccessToken.accessToken) {\n      throw new Error(\"Failed to exchange ACR refresh token for an ACR access token\");\n    }\n    return acrAccessToken.accessToken;\n  }\n}\n"]}