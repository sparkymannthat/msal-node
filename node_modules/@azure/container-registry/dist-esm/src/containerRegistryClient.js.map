{"version":3,"file":"containerRegistryClient.js","sourceRoot":"","sources":["../../src/containerRegistryClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport { isTokenCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  InternalPipelineOptions,\n  bearerTokenAuthenticationPolicy,\n  PipelineOptions,\n} from \"@azure/core-rest-pipeline\";\nimport { OperationOptions } from \"@azure/core-client\";\n\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport \"@azure/core-paging\";\nimport { PageSettings, PagedAsyncIterableIterator } from \"@azure/core-paging\";\n\nimport { logger } from \"./logger\";\nimport { GeneratedClient } from \"./generated\";\nimport { createSpan } from \"./tracing\";\nimport { RepositoryPageResponse } from \"./models\";\nimport { extractNextLink } from \"./utils/helpers\";\nimport { ChallengeHandler } from \"./containerRegistryChallengeHandler\";\nimport {\n  ContainerRepository,\n  ContainerRepositoryImpl,\n  DeleteRepositoryOptions,\n} from \"./containerRepository\";\nimport { RegistryArtifact } from \"./registryArtifact\";\nimport { ContainerRegistryRefreshTokenCredential } from \"./containerRegistryTokenCredential\";\n\nconst LATEST_API_VERSION = \"2021-07-01\";\n\n/**\n * Client options used to configure Container Registry Repository API requests.\n */\nexport interface ContainerRegistryClientOptions extends PipelineOptions {\n  /**\n   * Gets or sets the audience to use for authentication with Azure Active Directory.\n   * The authentication scope will be set from this audience.\n   * See {@link KnownContainerRegistryAudience} for known audience values.\n   */\n  audience?: string;\n  /**\n   * The version of service API to make calls against.\n   */\n  serviceVersion?: \"2021-07-01\";\n}\n\n/**\n * Options for the `listRepositories` method of `ContainerRegistryClient`.\n */\nexport interface ListRepositoriesOptions extends OperationOptions {}\n\n/**\n * The client class used to interact with the Container Registry service.\n */\nexport class ContainerRegistryClient {\n  /**\n   * The Azure Container Registry endpoint.\n   */\n  public readonly endpoint: string;\n\n  private client: GeneratedClient;\n\n  /**\n   * Creates an instance of a ContainerRegistryClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { ContainerRegistryClient } from \"@azure/container-registry\";\n   * import { DefaultAzureCredential} from \"@azure/identity\";\n   *\n   * const client = new ContainerRegistryClient(\n   *    \"<container registry API endpoint>\",\n   *    new DefaultAzureCredential()\n   * );\n   * ```\n   * @param endpoint - the URL endpoint of the container registry\n   * @param credential - used to authenticate requests to the service\n   * @param options - optional configuration used to send requests to the service\n   */\n  constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: ContainerRegistryClientOptions\n  );\n\n  /**\n   * Creates an instance of a ContainerRegistryClient to interact with\n   * an Azure Container Registry that has anonymous pull access enabled.\n   * Only operations that support anonymous access are enabled. Other service\n   * methods will throw errors.\n   *\n   * Example usage:\n   * ```ts\n   * import { ContainerRegistryClient } from \"@azure/container-registry\";\n   *\n   * const client = new ContainerRegistryClient(\n   *    \"<container registry API endpoint>\",\n   * );\n   * ```\n   * @param endpoint - the URL endpoint of the container registry\n   * @param options - optional configuration used to send requests to the service\n   */\n  constructor(endpoint: string, options?: ContainerRegistryClientOptions);\n\n  constructor(\n    endpoint: string,\n    credentialOrOptions?: TokenCredential | ContainerRegistryClientOptions,\n    clientOptions: ContainerRegistryClientOptions = {}\n  ) {\n    if (!endpoint) {\n      throw new Error(\"invalid endpoint\");\n    }\n\n    this.endpoint = endpoint;\n\n    let credential: TokenCredential | undefined;\n    let options: ContainerRegistryClientOptions | undefined;\n    if (isTokenCredential(credentialOrOptions)) {\n      credential = credentialOrOptions;\n      options = clientOptions;\n    } else {\n      options = credentialOrOptions ?? {};\n    }\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...options,\n      loggingOptions: {\n        logger: logger.info,\n        // This array contains header names we want to log that are not already\n        // included as safe. Unknown/unsafe headers are logged as \"<REDACTED>\".\n        additionalAllowedQueryParameters: [\"last\", \"n\", \"orderby\", \"digest\"],\n      },\n    };\n    // Require audience now until we have a default ACR audience from the service.\n    if (!options.audience) {\n      throw new Error(\n        \"ContainerRegistryClientOptions.audience must be set to initialize ContainerRegistryClient.\"\n      );\n    }\n\n    const defaultScope = `${options.audience}/.default`;\n    const serviceVersion = options.serviceVersion ?? LATEST_API_VERSION;\n    const authClient = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n    this.client = new GeneratedClient(endpoint, serviceVersion, internalPipelineOptions);\n    this.client.pipeline.addPolicy(\n      bearerTokenAuthenticationPolicy({\n        credential,\n        scopes: [defaultScope],\n        challengeCallbacks: new ChallengeHandler(\n          new ContainerRegistryRefreshTokenCredential(authClient, defaultScope, credential)\n        ),\n      })\n    );\n  }\n\n  /**\n   * Deletes the repository identified by the given name and all associated artifacts.\n   *\n   * @param repositoryName - the name of repository to delete\n   * @param options - optional configuration for the operation\n   */\n  public async deleteRepository(\n    repositoryName: string,\n    options: DeleteRepositoryOptions = {}\n  ): Promise<void> {\n    if (!repositoryName) {\n      throw new Error(\"invalid repositoryName\");\n    }\n\n    const { span, updatedOptions } = createSpan(\n      \"ContainerRegistryClient-deleteRepository\",\n      options\n    );\n\n    try {\n      await this.client.containerRegistry.deleteRepository(repositoryName, updatedOptions);\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an instance of {@link RegistryArtifact} for calling service methods related to the artifact specified by `repositoryName` and `tagOrDigest`.\n   *\n   * @param repositoryName - the name of repository\n   * @param tagOrDigest - tag or digest of the artifact to retrieve\n   */\n  public getArtifact(repositoryName: string, tagOrDigest: string): RegistryArtifact {\n    if (!repositoryName) {\n      throw new Error(\"invalid repositoryName\");\n    }\n    if (!tagOrDigest) {\n      throw new Error(\"invalid tagOrDigest\");\n    }\n\n    return new ContainerRepositoryImpl(this.endpoint, repositoryName, this.client).getArtifact(\n      tagOrDigest\n    );\n  }\n\n  /**\n   * Returns an instance of {@link ContainerRepository} for calling service methods related to the repository specified by `repositoryName`.\n   *\n   * @param repositoryName - the name of repository\n   */\n  public getRepository(repositoryName: string): ContainerRepository {\n    if (!repositoryName) {\n      throw new Error(\"invalid repositoryName\");\n    }\n\n    return new ContainerRepositoryImpl(this.endpoint, repositoryName, this.client);\n  }\n\n  /**\n   * Returns an async iterable iterator to list names of repositories in this registry.\n   *\n   * Example usage:\n   * ```javascript\n   * let client = new ContainerRegistryClient(url, credential);\n   * for await (const repository of client.listRepositoryNames()) {\n   *   console.log(\"repository name: \", repository);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```javascript\n   * let iter = client.listRepositoryNames();\n   * let item = await iter.next();\n   * while (!item.done) {\n   *   console.log(`repository name: ${item.value}`);\n   *   item = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```javascript\n   * const pages = client.listRepositoryNames().byPage({ maxPageSize: 2 });\n   * let page = await pages.next();\n   * let i = 1;\n   * while (!page.done) {\n   *  if (page.value) {\n   *    console.log(`-- page ${i++}`);\n   *    for (const name of page.value) {\n   *      console.log(`  repository name: ${name}`);\n   *    }\n   *  }\n   *  page = await pages.next();\n   * }\n   * ```\n   * @param options -\n   */\n  public listRepositoryNames(\n    options: ListRepositoriesOptions = {}\n  ): PagedAsyncIterableIterator<string, RepositoryPageResponse> {\n    const iter = this.listRepositoryItems(options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => this.listRepositoriesPage(settings, options),\n    };\n  }\n\n  private async *listRepositoryItems(\n    options: ListRepositoriesOptions = {}\n  ): AsyncIterableIterator<string> {\n    for await (const page of this.listRepositoriesPage({}, options)) {\n      yield* page;\n    }\n  }\n\n  private async *listRepositoriesPage(\n    continuationState: PageSettings,\n    options: ListRepositoriesOptions = {}\n  ): AsyncIterableIterator<RepositoryPageResponse> {\n    if (!continuationState.continuationToken) {\n      const optionsComplete = {\n        ...options,\n        n: continuationState.maxPageSize,\n      };\n      const currentPage = await this.client.containerRegistry.getRepositories(optionsComplete);\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.repositories) {\n        const array = currentPage.repositories;\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n    while (continuationState.continuationToken) {\n      const currentPage = await this.client.containerRegistry.getRepositoriesNext(\n        continuationState.continuationToken,\n        options\n      );\n      continuationState.continuationToken = extractNextLink(currentPage.link);\n      if (currentPage.repositories) {\n        const array = currentPage.repositories;\n        yield Object.defineProperty(array, \"continuationToken\", {\n          value: continuationState.continuationToken,\n          enumerable: true,\n        });\n      }\n    }\n  }\n}\n"]}