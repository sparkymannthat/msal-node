/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { Manifest as ManifestMapper, RepositoryWriteableProperties as RepositoryWriteablePropertiesMapper, TagWriteableProperties as TagWriteablePropertiesMapper, ManifestWriteableProperties as ManifestWriteablePropertiesMapper } from "../models/mappers";
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const url = {
    parameterPath: "url",
    mapper: {
        serializedName: "url",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const name = {
    parameterPath: "name",
    mapper: {
        serializedName: "name",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const reference = {
    parameterPath: "reference",
    mapper: {
        serializedName: "reference",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const accept1 = {
    parameterPath: ["options", "accept"],
    mapper: {
        serializedName: "accept",
        type: {
            name: "String"
        }
    }
};
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/vnd.docker.distribution.manifest.v2+json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const payload = {
    parameterPath: "payload",
    mapper: ManifestMapper
};
export const last = {
    parameterPath: ["options", "last"],
    mapper: {
        serializedName: "last",
        type: {
            name: "String"
        }
    }
};
export const n = {
    parameterPath: ["options", "n"],
    mapper: {
        serializedName: "n",
        type: {
            name: "Number"
        }
    }
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        serializedName: "api-version",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const value = {
    parameterPath: ["options", "value"],
    mapper: RepositoryWriteablePropertiesMapper
};
export const orderby = {
    parameterPath: ["options", "orderby"],
    mapper: {
        serializedName: "orderby",
        type: {
            name: "String"
        }
    }
};
export const digest = {
    parameterPath: ["options", "digest"],
    mapper: {
        serializedName: "digest",
        type: {
            name: "String"
        }
    }
};
export const value1 = {
    parameterPath: ["options", "value"],
    mapper: TagWriteablePropertiesMapper
};
export const digest1 = {
    parameterPath: "digest",
    mapper: {
        serializedName: "digest",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const value2 = {
    parameterPath: ["options", "value"],
    mapper: ManifestWriteablePropertiesMapper
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/octet-stream",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const fromParam = {
    parameterPath: "fromParam",
    mapper: {
        serializedName: "from",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const mount = {
    parameterPath: "mount",
    mapper: {
        serializedName: "mount",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const location = {
    parameterPath: "location",
    mapper: {
        serializedName: "nextBlobUuidLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const contentType2 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/octet-stream",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const value3 = {
    parameterPath: "value",
    mapper: {
        serializedName: "value",
        required: true,
        type: {
            name: "Stream"
        }
    }
};
export const accept3 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const value4 = {
    parameterPath: ["options", "value"],
    mapper: {
        serializedName: "value",
        type: {
            name: "Stream"
        }
    }
};
export const digest2 = {
    parameterPath: "digest",
    mapper: {
        serializedName: "digest",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const range = {
    parameterPath: "range",
    mapper: {
        serializedName: "Range",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const contentType3 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/x-www-form-urlencoded",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const grantType = {
    parameterPath: "grantType",
    mapper: {
        serializedName: "grant_type",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const service = {
    parameterPath: "service",
    mapper: {
        serializedName: "service",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const tenant = {
    parameterPath: ["options", "tenant"],
    mapper: {
        serializedName: "tenant",
        type: {
            name: "String"
        }
    }
};
export const refreshToken = {
    parameterPath: ["options", "refreshToken"],
    mapper: {
        serializedName: "refresh_token",
        type: {
            name: "String"
        }
    }
};
export const accessToken = {
    parameterPath: ["options", "accessToken"],
    mapper: {
        serializedName: "access_token",
        type: {
            name: "String"
        }
    }
};
export const accept4 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const scope = {
    parameterPath: "scope",
    mapper: {
        serializedName: "scope",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const refreshToken1 = {
    parameterPath: "refreshToken",
    mapper: {
        serializedName: "refresh_token",
        required: true,
        type: {
            name: "String"
        }
    }
};
export const grantType1 = {
    parameterPath: "grantType",
    mapper: {
        serializedName: "grant_type",
        required: true,
        type: {
            name: "Enum",
            allowedValues: ["refresh_token", "password"]
        }
    }
};
//# sourceMappingURL=parameters.js.map