/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const AcrErrors = {
    type: {
        name: "Composite",
        className: "AcrErrors",
        modelProperties: {
            errors: {
                serializedName: "errors",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AcrErrorInfo"
                        }
                    }
                }
            }
        }
    }
};
export const AcrErrorInfo = {
    type: {
        name: "Composite",
        className: "AcrErrorInfo",
        modelProperties: {
            code: {
                serializedName: "code",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            },
            detail: {
                serializedName: "detail",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const Manifest = {
    type: {
        name: "Composite",
        className: "Manifest",
        modelProperties: {
            schemaVersion: {
                serializedName: "schemaVersion",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ManifestListAttributes = {
    type: {
        name: "Composite",
        className: "ManifestListAttributes",
        modelProperties: {
            mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "Number"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            },
            platform: {
                serializedName: "platform",
                type: {
                    name: "Composite",
                    className: "Platform"
                }
            }
        }
    }
};
export const Platform = {
    type: {
        name: "Composite",
        className: "Platform",
        modelProperties: {
            architecture: {
                serializedName: "architecture",
                type: {
                    name: "String"
                }
            },
            os: {
                serializedName: "os",
                type: {
                    name: "String"
                }
            },
            osVersion: {
                serializedName: "os\\.version",
                type: {
                    name: "String"
                }
            },
            osFeatures: {
                serializedName: "os\\.features",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            variant: {
                serializedName: "variant",
                type: {
                    name: "String"
                }
            },
            features: {
                serializedName: "features",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const Descriptor = {
    type: {
        name: "Composite",
        className: "Descriptor",
        modelProperties: {
            mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                type: {
                    name: "Number"
                }
            },
            digest: {
                serializedName: "digest",
                type: {
                    name: "String"
                }
            },
            urls: {
                serializedName: "urls",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Composite",
                    className: "Annotations"
                }
            }
        }
    }
};
export const Annotations = {
    type: {
        name: "Composite",
        className: "Annotations",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            created: {
                serializedName: "org\\.opencontainers.image.created",
                type: {
                    name: "DateTime"
                }
            },
            authors: {
                serializedName: "org\\.opencontainers.image.authors",
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "org\\.opencontainers.image.url",
                type: {
                    name: "String"
                }
            },
            documentation: {
                serializedName: "org\\.opencontainers.image.documentation",
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "org\\.opencontainers.image.source",
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "org\\.opencontainers.image.version",
                type: {
                    name: "String"
                }
            },
            revision: {
                serializedName: "org\\.opencontainers.image.revision",
                type: {
                    name: "String"
                }
            },
            vendor: {
                serializedName: "org\\.opencontainers.image.vendor",
                type: {
                    name: "String"
                }
            },
            licenses: {
                serializedName: "org\\.opencontainers.image.licenses",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "org\\.opencontainers.image.ref.name",
                type: {
                    name: "String"
                }
            },
            title: {
                serializedName: "org\\.opencontainers.image.title",
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "org\\.opencontainers.image.description",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const FsLayer = {
    type: {
        name: "Composite",
        className: "FsLayer",
        modelProperties: {
            blobSum: {
                serializedName: "blobSum",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const History = {
    type: {
        name: "Composite",
        className: "History",
        modelProperties: {
            v1Compatibility: {
                serializedName: "v1Compatibility",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ImageSignature = {
    type: {
        name: "Composite",
        className: "ImageSignature",
        modelProperties: {
            header: {
                serializedName: "header",
                type: {
                    name: "Composite",
                    className: "Jwk"
                }
            },
            signature: {
                serializedName: "signature",
                type: {
                    name: "String"
                }
            },
            protected: {
                serializedName: "protected",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Jwk = {
    type: {
        name: "Composite",
        className: "Jwk",
        modelProperties: {
            jwk: {
                serializedName: "jwk",
                type: {
                    name: "Composite",
                    className: "JWKHeader"
                }
            },
            alg: {
                serializedName: "alg",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const JWKHeader = {
    type: {
        name: "Composite",
        className: "JWKHeader",
        modelProperties: {
            crv: {
                serializedName: "crv",
                type: {
                    name: "String"
                }
            },
            kid: {
                serializedName: "kid",
                type: {
                    name: "String"
                }
            },
            kty: {
                serializedName: "kty",
                type: {
                    name: "String"
                }
            },
            x: {
                serializedName: "x",
                type: {
                    name: "String"
                }
            },
            y: {
                serializedName: "y",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Repositories = {
    type: {
        name: "Composite",
        className: "Repositories",
        modelProperties: {
            repositories: {
                serializedName: "repositories",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRepositoryProperties = {
    type: {
        name: "Composite",
        className: "ContainerRepositoryProperties",
        modelProperties: {
            registryLoginServer: {
                serializedName: "registry",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "imageName",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdOn: {
                serializedName: "createdTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedOn: {
                serializedName: "lastUpdateTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            manifestCount: {
                serializedName: "manifestCount",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            tagCount: {
                serializedName: "tagCount",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            canDelete: {
                serializedName: "changeableAttributes.deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "changeableAttributes.writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "changeableAttributes.listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "changeableAttributes.readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const RepositoryWriteableProperties = {
    type: {
        name: "Composite",
        className: "RepositoryWriteableProperties",
        modelProperties: {
            canDelete: {
                serializedName: "deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const TagList = {
    type: {
        name: "Composite",
        className: "TagList",
        modelProperties: {
            registryLoginServer: {
                serializedName: "registry",
                required: true,
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "imageName",
                required: true,
                type: {
                    name: "String"
                }
            },
            tagAttributeBases: {
                serializedName: "tags",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TagAttributesBase"
                        }
                    }
                }
            },
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const TagAttributesBase = {
    type: {
        name: "Composite",
        className: "TagAttributesBase",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            digest: {
                serializedName: "digest",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdOn: {
                serializedName: "createdTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedOn: {
                serializedName: "lastUpdateTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            canDelete: {
                serializedName: "changeableAttributes.deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "changeableAttributes.writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "changeableAttributes.listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "changeableAttributes.readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const TagWriteableProperties = {
    type: {
        name: "Composite",
        className: "TagWriteableProperties",
        modelProperties: {
            canDelete: {
                serializedName: "deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const ArtifactTagProperties = {
    type: {
        name: "Composite",
        className: "ArtifactTagProperties",
        modelProperties: {
            registryLoginServer: {
                serializedName: "registry",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            repositoryName: {
                serializedName: "imageName",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "tag.name",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            digest: {
                serializedName: "tag.digest",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            createdOn: {
                serializedName: "tag.createdTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedOn: {
                serializedName: "tag.lastUpdateTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            canDelete: {
                serializedName: "tag.changeableAttributes.deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "tag.changeableAttributes.writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "tag.changeableAttributes.listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "tag.changeableAttributes.readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const AcrManifests = {
    type: {
        name: "Composite",
        className: "AcrManifests",
        modelProperties: {
            registryLoginServer: {
                serializedName: "registry",
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "imageName",
                type: {
                    name: "String"
                }
            },
            manifests: {
                serializedName: "manifests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManifestAttributesBase"
                        }
                    }
                }
            },
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManifestAttributesBase = {
    type: {
        name: "Composite",
        className: "ManifestAttributesBase",
        modelProperties: {
            digest: {
                serializedName: "digest",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "imageSize",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            createdOn: {
                serializedName: "createdTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedOn: {
                serializedName: "lastUpdateTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            architecture: {
                serializedName: "architecture",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            operatingSystem: {
                serializedName: "os",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            relatedArtifacts: {
                serializedName: "references",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArtifactManifestPlatform"
                        }
                    }
                }
            },
            tags: {
                serializedName: "tags",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            canDelete: {
                serializedName: "changeableAttributes.deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "changeableAttributes.writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "changeableAttributes.listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "changeableAttributes.readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const ArtifactManifestPlatform = {
    type: {
        name: "Composite",
        className: "ArtifactManifestPlatform",
        modelProperties: {
            digest: {
                serializedName: "digest",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            architecture: {
                serializedName: "architecture",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operatingSystem: {
                serializedName: "os",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManifestWriteableProperties = {
    type: {
        name: "Composite",
        className: "ManifestWriteableProperties",
        modelProperties: {
            canDelete: {
                serializedName: "deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const ArtifactManifestProperties = {
    type: {
        name: "Composite",
        className: "ArtifactManifestProperties",
        modelProperties: {
            registryLoginServer: {
                serializedName: "registry",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            repositoryName: {
                serializedName: "imageName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            digest: {
                serializedName: "manifest.digest",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "manifest.imageSize",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            createdOn: {
                serializedName: "manifest.createdTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            lastUpdatedOn: {
                serializedName: "manifest.lastUpdateTime",
                required: true,
                readOnly: true,
                type: {
                    name: "DateTime"
                }
            },
            architecture: {
                serializedName: "manifest.architecture",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            operatingSystem: {
                serializedName: "manifest.os",
                readOnly: true,
                nullable: true,
                type: {
                    name: "String"
                }
            },
            relatedArtifacts: {
                serializedName: "manifest.references",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArtifactManifestPlatform"
                        }
                    }
                }
            },
            tags: {
                serializedName: "manifest.tags",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            canDelete: {
                serializedName: "manifest.changeableAttributes.deleteEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canWrite: {
                serializedName: "manifest.changeableAttributes.writeEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canList: {
                serializedName: "manifest.changeableAttributes.listEnabled",
                type: {
                    name: "Boolean"
                }
            },
            canRead: {
                serializedName: "manifest.changeableAttributes.readEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const AcrRefreshToken = {
    type: {
        name: "Composite",
        className: "AcrRefreshToken",
        modelProperties: {
            refreshToken: {
                serializedName: "refresh_token",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AcrAccessToken = {
    type: {
        name: "Composite",
        className: "AcrAccessToken",
        modelProperties: {
            accessToken: {
                serializedName: "access_token",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RepositoryTags = {
    type: {
        name: "Composite",
        className: "RepositoryTags",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const DeleteRepositoryResult = {
    type: {
        name: "Composite",
        className: "DeleteRepositoryResult",
        modelProperties: {
            deletedManifests: {
                serializedName: "manifestsDeleted",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            deletedTags: {
                serializedName: "tagsDeleted",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const TagAttributesTag = {
    type: {
        name: "Composite",
        className: "TagAttributesTag",
        modelProperties: {
            signatureRecord: {
                serializedName: "signatureRecord",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManifestAttributesManifest = {
    type: {
        name: "Composite",
        className: "ManifestAttributesManifest",
        modelProperties: {
            references: {
                serializedName: "references",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ArtifactManifestPlatform"
                        }
                    }
                }
            }
        }
    }
};
export const Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema = {
    type: {
        name: "Composite",
        className: "Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema",
        modelProperties: {
            grantType: {
                serializedName: "grant_type",
                required: true,
                type: {
                    name: "String"
                }
            },
            service: {
                serializedName: "service",
                required: true,
                type: {
                    name: "String"
                }
            },
            tenant: {
                serializedName: "tenant",
                type: {
                    name: "String"
                }
            },
            refreshToken: {
                serializedName: "refresh_token",
                type: {
                    name: "String"
                }
            },
            aadAccessToken: {
                serializedName: "access_token",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema = {
    type: {
        name: "Composite",
        className: "PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema",
        modelProperties: {
            service: {
                serializedName: "service",
                required: true,
                type: {
                    name: "String"
                }
            },
            scope: {
                serializedName: "scope",
                required: true,
                type: {
                    name: "String"
                }
            },
            acrRefreshToken: {
                serializedName: "refresh_token",
                required: true,
                type: {
                    name: "String"
                }
            },
            grantType: {
                serializedName: "grant_type",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["refresh_token", "password"]
                }
            }
        }
    }
};
export const ManifestWrapper = {
    type: {
        name: "Composite",
        className: "ManifestWrapper",
        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            }, manifests: {
                serializedName: "manifests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManifestListAttributes"
                        }
                    }
                }
            }, config: {
                serializedName: "config",
                type: {
                    name: "Composite",
                    className: "Descriptor"
                }
            }, layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Descriptor"
                        }
                    }
                }
            }, annotations: {
                serializedName: "annotations",
                type: {
                    name: "Composite",
                    className: "Annotations"
                }
            }, architecture: {
                serializedName: "architecture",
                type: {
                    name: "String"
                }
            }, name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            }, fsLayers: {
                serializedName: "fsLayers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FsLayer"
                        }
                    }
                }
            }, history: {
                serializedName: "history",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "History"
                        }
                    }
                }
            }, signatures: {
                serializedName: "signatures",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageSignature"
                        }
                    }
                }
            } })
    }
};
export const ManifestList = {
    serializedName: "application/vnd.docker.distribution.manifest.list.v2+json",
    type: {
        name: "Composite",
        className: "ManifestList",
        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            }, manifests: {
                serializedName: "manifests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManifestListAttributes"
                        }
                    }
                }
            } })
    }
};
export const V2Manifest = {
    serializedName: "application/vnd.docker.distribution.manifest.v2+json",
    type: {
        name: "Composite",
        className: "V2Manifest",
        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { mediaType: {
                serializedName: "mediaType",
                type: {
                    name: "String"
                }
            }, config: {
                serializedName: "config",
                type: {
                    name: "Composite",
                    className: "Descriptor"
                }
            }, layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Descriptor"
                        }
                    }
                }
            } })
    }
};
export const OCIManifest = {
    serializedName: "application/vnd.oci.image.manifest.v1+json",
    type: {
        name: "Composite",
        className: "OCIManifest",
        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { config: {
                serializedName: "config",
                type: {
                    name: "Composite",
                    className: "Descriptor"
                }
            }, layers: {
                serializedName: "layers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Descriptor"
                        }
                    }
                }
            }, annotations: {
                serializedName: "annotations",
                type: {
                    name: "Composite",
                    className: "Annotations"
                }
            } })
    }
};
export const OCIIndex = {
    serializedName: "application/vnd.oci.image.index.v1+json",
    type: {
        name: "Composite",
        className: "OCIIndex",
        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { manifests: {
                serializedName: "manifests",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManifestListAttributes"
                        }
                    }
                }
            }, annotations: {
                serializedName: "annotations",
                type: {
                    name: "Composite",
                    className: "Annotations"
                }
            } })
    }
};
export const V1Manifest = {
    serializedName: "application/vnd.oci.image.manifest.v1+json",
    type: {
        name: "Composite",
        className: "V1Manifest",
        modelProperties: Object.assign(Object.assign({}, Manifest.type.modelProperties), { architecture: {
                serializedName: "architecture",
                type: {
                    name: "String"
                }
            }, name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }, tag: {
                serializedName: "tag",
                type: {
                    name: "String"
                }
            }, fsLayers: {
                serializedName: "fsLayers",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "FsLayer"
                        }
                    }
                }
            }, history: {
                serializedName: "history",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "History"
                        }
                    }
                }
            }, signatures: {
                serializedName: "signatures",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ImageSignature"
                        }
                    }
                }
            } })
    }
};
export const ContainerRegistryCreateManifestHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryCreateManifestHeaders",
        modelProperties: {
            dockerContentDigest: {
                serializedName: "docker-content-digest",
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ContainerRegistryGetRepositoriesHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryGetRepositoriesHeaders",
        modelProperties: {
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryGetTagsHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryGetTagsHeaders",
        modelProperties: {
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryGetManifestsHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryGetManifestsHeaders",
        modelProperties: {
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryGetRepositoriesNextHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryGetRepositoriesNextHeaders",
        modelProperties: {
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryGetTagsNextHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryGetTagsNextHeaders",
        modelProperties: {
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryGetManifestsNextHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryGetManifestsNextHeaders",
        modelProperties: {
            link: {
                serializedName: "link",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobGetBlobHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobGetBlobHeaders",
        modelProperties: {
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            dockerContentDigest: {
                serializedName: "docker-content-digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobCheckBlobExistsHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobCheckBlobExistsHeaders",
        modelProperties: {
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            dockerContentDigest: {
                serializedName: "docker-content-digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobDeleteBlobHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobDeleteBlobHeaders",
        modelProperties: {
            dockerContentDigest: {
                serializedName: "docker-content-digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobMountBlobHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobMountBlobHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            dockerUploadUuid: {
                serializedName: "docker-upload-uuid",
                type: {
                    name: "String"
                }
            },
            dockerContentDigest: {
                serializedName: "docker-content-digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobGetUploadStatusHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobGetUploadStatusHeaders",
        modelProperties: {
            range: {
                serializedName: "range",
                type: {
                    name: "String"
                }
            },
            dockerUploadUuid: {
                serializedName: "docker-upload-uuid",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobUploadChunkHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobUploadChunkHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            range: {
                serializedName: "range",
                type: {
                    name: "String"
                }
            },
            dockerUploadUuid: {
                serializedName: "docker-upload-uuid",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobCompleteUploadHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobCompleteUploadHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            range: {
                serializedName: "range",
                type: {
                    name: "String"
                }
            },
            dockerContentDigest: {
                serializedName: "docker-content-digest",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobStartUploadHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobStartUploadHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String"
                }
            },
            range: {
                serializedName: "range",
                type: {
                    name: "String"
                }
            },
            dockerUploadUuid: {
                serializedName: "docker-upload-uuid",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobGetChunkHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobGetChunkHeaders",
        modelProperties: {
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentRange: {
                serializedName: "content-range",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContainerRegistryBlobCheckChunkExistsHeaders = {
    type: {
        name: "Composite",
        className: "ContainerRegistryBlobCheckChunkExistsHeaders",
        modelProperties: {
            contentLength: {
                serializedName: "content-length",
                type: {
                    name: "Number"
                }
            },
            contentRange: {
                serializedName: "content-range",
                type: {
                    name: "String"
                }
            }
        }
    }
};
//# sourceMappingURL=mappers.js.map