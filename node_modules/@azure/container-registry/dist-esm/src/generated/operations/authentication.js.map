{"version":3,"file":"authentication.js","sourceRoot":"","sources":["../../../../src/generated/operations/authentication.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,mBAAmB,CAAC;AAC7C,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AAWnD,kDAAkD;AAClD,MAAM,OAAO,kBAAkB;IAG7B;;;OAGG;IACH,YAAY,MAA8B;QACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,wCAAwC,CACtC,SAAqC,EACrC,OAAe,EACf,OAA8E;QAE9E,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,EAC/B,qDAAqD,CACtD,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACH,wCAAwC,CACtC,OAAe,EACf,KAAa,EACb,YAAoB,EACpB,SAAyB,EACzB,OAA8E;QAE9E,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,EACpD,qDAAqD,CACtD,CAAC;IACJ,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,qDAAqD,GAA6B;IACtF,IAAI,EAAE,kBAAkB;IACxB,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,eAAe;SACpC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,kBAAkB,EAAE;QAClB,UAAU,CAAC,SAAS;QACpB,UAAU,CAAC,OAAO;QAClB,UAAU,CAAC,MAAM;QACjB,UAAU,CAAC,YAAY;QACvB,UAAU,CAAC,WAAW;KACvB;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC;IAC/B,gBAAgB,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC;IAC/D,UAAU;CACX,CAAC;AACF,MAAM,qDAAqD,GAA6B;IACtF,IAAI,EAAE,eAAe;IACrB,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,cAAc;SACnC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,kBAAkB,EAAE;QAClB,UAAU,CAAC,OAAO;QAClB,UAAU,CAAC,KAAK;QAChB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,UAAU;KACtB;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC;IAC/B,gBAAgB,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC;IAC/D,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { Authentication } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  PostContentSchemaGrantType,\n  AuthenticationExchangeAadAccessTokenForAcrRefreshTokenOptionalParams,\n  AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse,\n  TokenGrantType,\n  AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenOptionalParams,\n  AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse\n} from \"../models\";\n\n/** Class containing Authentication operations. */\nexport class AuthenticationImpl implements Authentication {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class Authentication class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Exchange AAD tokens for an ACR refresh Token\n   * @param grantType Can take a value of access_token_refresh_token, or access_token, or refresh_token\n   * @param service Indicates the name of your Azure container registry.\n   * @param options The options parameters.\n   */\n  exchangeAadAccessTokenForAcrRefreshToken(\n    grantType: PostContentSchemaGrantType,\n    service: string,\n    options?: AuthenticationExchangeAadAccessTokenForAcrRefreshTokenOptionalParams\n  ): Promise<AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse> {\n    return this.client.sendOperationRequest(\n      { grantType, service, options },\n      exchangeAadAccessTokenForAcrRefreshTokenOperationSpec\n    );\n  }\n\n  /**\n   * Exchange ACR Refresh token for an ACR Access Token\n   * @param service Indicates the name of your Azure container registry.\n   * @param scope Which is expected to be a valid scope, and can be specified more than once for multiple\n   *              scope requests. You obtained this from the Www-Authenticate response header from the challenge.\n   * @param refreshToken Must be a valid ACR refresh token\n   * @param grantType Grant type is expected to be refresh_token\n   * @param options The options parameters.\n   */\n  exchangeAcrRefreshTokenForAcrAccessToken(\n    service: string,\n    scope: string,\n    refreshToken: string,\n    grantType: TokenGrantType,\n    options?: AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenOptionalParams\n  ): Promise<AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse> {\n    return this.client.sendOperationRequest(\n      { service, scope, refreshToken, grantType, options },\n      exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst exchangeAadAccessTokenForAcrRefreshTokenOperationSpec: coreClient.OperationSpec = {\n  path: \"/oauth2/exchange\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AcrRefreshToken\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  formDataParameters: [\n    Parameters.grantType,\n    Parameters.service,\n    Parameters.tenant,\n    Parameters.refreshToken,\n    Parameters.accessToken\n  ],\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType3, Parameters.accept4],\n  serializer\n};\nconst exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec: coreClient.OperationSpec = {\n  path: \"/oauth2/token\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AcrAccessToken\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  formDataParameters: [\n    Parameters.service,\n    Parameters.scope,\n    Parameters.refreshToken1,\n    Parameters.grantType1\n  ],\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.url],\n  headerParameters: [Parameters.contentType3, Parameters.accept4],\n  serializer\n};\n"]}