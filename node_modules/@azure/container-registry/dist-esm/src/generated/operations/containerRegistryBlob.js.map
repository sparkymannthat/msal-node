{"version":3,"file":"containerRegistryBlob.js","sourceRoot":"","sources":["../../../../src/generated/operations/containerRegistryBlob.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AAEjD,OAAO,KAAK,OAAO,MAAM,mBAAmB,CAAC;AAC7C,OAAO,KAAK,UAAU,MAAM,sBAAsB,CAAC;AA0BnD,yDAAyD;AACzD,MAAM,OAAO,yBAAyB;IAGpC;;;OAGG;IACH,YAAY,MAA8B;QACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,OAAO,CACL,IAAY,EACZ,MAAc,EACd,OAAoD;QAEpD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,EACzB,oBAAoB,CACrB,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,eAAe,CACb,IAAY,EACZ,MAAc,EACd,OAA4D;QAE5D,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,EACzB,4BAA4B,CAC7B,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,UAAU,CACR,IAAY,EACZ,MAAc,EACd,OAAuD;QAEvD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,EACzB,uBAAuB,CACxB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,SAAS,CACP,IAAY,EACZ,KAAa,EACb,SAAiB,EACjB,OAAsD;QAEtD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,EACnC,sBAAsB,CACvB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,eAAe,CACb,QAAgB,EAChB,OAA4D;QAE5D,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,QAAQ,EAAE,OAAO,EAAE,EACrB,4BAA4B,CAC7B,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,WAAW,CACT,QAAgB,EAChB,KAAuC,EACvC,OAAwD;QAExD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,EAC5B,wBAAwB,CACzB,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACH,cAAc,CACZ,MAAc,EACd,QAAgB,EAChB,OAA2D;QAE3D,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,EAC7B,2BAA2B,CAC5B,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,YAAY,CACV,QAAgB,EAChB,OAAyD;QAEzD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,QAAQ,EAAE,OAAO,EAAE,EACrB,yBAAyB,CAC1B,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,WAAW,CACT,IAAY,EACZ,OAAwD;QAExD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,IAAI,EAAE,OAAO,EAAE,EACjB,wBAAwB,CACzB,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACH,QAAQ,CACN,IAAY,EACZ,MAAc,EACd,KAAa,EACb,OAAqD;QAErD,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,EAChC,qBAAqB,CACtB,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,gBAAgB,CACd,IAAY,EACZ,MAAc,EACd,KAAa,EACb,OAA6D;QAE7D,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,EAChC,6BAA6B,CAC9B,CAAC;IACJ,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,oBAAoB,GAA6B;IACrD,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE;gBACV,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACxB,cAAc,EAAE,gBAAgB;aACjC;YACD,aAAa,EAAE,OAAO,CAAC,mCAAmC;SAC3D;QACD,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,mCAAmC;SAC3D;QACD,OAAO,EAAE,EAAE;KACZ;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC;IACpE,gBAAgB,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,4BAA4B,GAA6B;IAC7D,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,2CAA2C;SACnE;QACD,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,2CAA2C;SACnE;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC;IACpE,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,uBAAuB,GAA6B;IACxD,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,QAAQ;IACpB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE;gBACV,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACxB,cAAc,EAAE,gBAAgB;aACjC;YACD,aAAa,EAAE,OAAO,CAAC,sCAAsC;SAC9D;QACD,OAAO,EAAE,EAAE;KACZ;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC;IACpE,gBAAgB,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;IACtC,UAAU;CACX,CAAC;AACF,MAAM,sBAAsB,GAA6B;IACvD,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,qCAAqC;SAC7D;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC;IACzD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC;IAChD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,4BAA4B,GAA6B;IAC7D,IAAI,EAAE,qBAAqB;IAC3B,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,2CAA2C;SACnE;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC;IACpD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,wBAAwB,GAA6B;IACzD,IAAI,EAAE,qBAAqB;IAC3B,UAAU,EAAE,OAAO;IACnB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,uCAAuC;SAC/D;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,MAAM;IAC9B,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC;IACpD,gBAAgB,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC;IAC/D,SAAS,EAAE,QAAQ;IACnB,UAAU;CACX,CAAC;AACF,MAAM,2BAA2B,GAA6B;IAC5D,IAAI,EAAE,qBAAqB;IAC3B,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,0CAA0C;SAClE;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,MAAM;IAC9B,eAAe,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC;IACrC,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC;IACpD,gBAAgB,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,OAAO,CAAC;IAC/D,SAAS,EAAE,QAAQ;IACnB,UAAU;CACX,CAAC;AACF,MAAM,yBAAyB,GAA6B;IAC1D,IAAI,EAAE,qBAAqB;IAC3B,UAAU,EAAE,QAAQ;IACpB,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,CAAC;IACpD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,wBAAwB,GAA6B;IACzD,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,uCAAuC;SAC/D;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC;IAChD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,qBAAqB,GAA6B;IACtD,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE;gBACV,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;gBACxB,cAAc,EAAE,gBAAgB;aACjC;YACD,aAAa,EAAE,OAAO,CAAC,oCAAoC;SAC5D;QACD,OAAO,EAAE,EAAE;KACZ;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC;IACpE,gBAAgB,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC;IACxD,UAAU;CACX,CAAC;AACF,MAAM,6BAA6B,GAA6B;IAC9D,IAAI,EAAE,2BAA2B;IACjC,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,aAAa,EAAE,OAAO,CAAC,4CAA4C;SACpE;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,SAAS;SAC9B;KACF;IACD,aAAa,EAAE,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,OAAO,CAAC;IACpE,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,KAAK,CAAC;IACvD,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { ContainerRegistryBlob } from \"../operationsInterfaces\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { GeneratedClientContext } from \"../generatedClientContext\";\nimport {\n  ContainerRegistryBlobGetBlobOptionalParams,\n  ContainerRegistryBlobGetBlobResponse,\n  ContainerRegistryBlobCheckBlobExistsOptionalParams,\n  ContainerRegistryBlobCheckBlobExistsResponse,\n  ContainerRegistryBlobDeleteBlobOptionalParams,\n  ContainerRegistryBlobDeleteBlobResponse,\n  ContainerRegistryBlobMountBlobOptionalParams,\n  ContainerRegistryBlobMountBlobResponse,\n  ContainerRegistryBlobGetUploadStatusOptionalParams,\n  ContainerRegistryBlobGetUploadStatusResponse,\n  ContainerRegistryBlobUploadChunkOptionalParams,\n  ContainerRegistryBlobUploadChunkResponse,\n  ContainerRegistryBlobCompleteUploadOptionalParams,\n  ContainerRegistryBlobCompleteUploadResponse,\n  ContainerRegistryBlobCancelUploadOptionalParams,\n  ContainerRegistryBlobStartUploadOptionalParams,\n  ContainerRegistryBlobStartUploadResponse,\n  ContainerRegistryBlobGetChunkOptionalParams,\n  ContainerRegistryBlobGetChunkResponse,\n  ContainerRegistryBlobCheckChunkExistsOptionalParams,\n  ContainerRegistryBlobCheckChunkExistsResponse\n} from \"../models\";\n\n/** Class containing ContainerRegistryBlob operations. */\nexport class ContainerRegistryBlobImpl implements ContainerRegistryBlob {\n  private readonly client: GeneratedClientContext;\n\n  /**\n   * Initialize a new instance of the class ContainerRegistryBlob class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieve the blob from the registry identified by digest.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  getBlob(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobGetBlobOptionalParams\n  ): Promise<ContainerRegistryBlobGetBlobResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      getBlobOperationSpec\n    );\n  }\n\n  /**\n   * Same as GET, except only the headers are returned.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  checkBlobExists(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobCheckBlobExistsOptionalParams\n  ): Promise<ContainerRegistryBlobCheckBlobExistsResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      checkBlobExistsOperationSpec\n    );\n  }\n\n  /**\n   * Removes an already uploaded blob.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  deleteBlob(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobDeleteBlobOptionalParams\n  ): Promise<ContainerRegistryBlobDeleteBlobResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, options },\n      deleteBlobOperationSpec\n    );\n  }\n\n  /**\n   * Mount a blob identified by the `mount` parameter from another repository.\n   * @param name Name of the image (including the namespace)\n   * @param mount Digest of blob to mount from the source repository.\n   * @param fromParam Name of the source repository.\n   * @param options The options parameters.\n   */\n  mountBlob(\n    name: string,\n    mount: string,\n    fromParam: string,\n    options?: ContainerRegistryBlobMountBlobOptionalParams\n  ): Promise<ContainerRegistryBlobMountBlobResponse> {\n    return this.client.sendOperationRequest(\n      { name, mount, fromParam, options },\n      mountBlobOperationSpec\n    );\n  }\n\n  /**\n   * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the\n   * current status of a resumable upload.\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  getUploadStatus(\n    location: string,\n    options?: ContainerRegistryBlobGetUploadStatusOptionalParams\n  ): Promise<ContainerRegistryBlobGetUploadStatusResponse> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      getUploadStatusOperationSpec\n    );\n  }\n\n  /**\n   * Upload a stream of data without completing the upload.\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param value Raw data of blob\n   * @param options The options parameters.\n   */\n  uploadChunk(\n    location: string,\n    value: coreRestPipeline.RequestBodyType,\n    options?: ContainerRegistryBlobUploadChunkOptionalParams\n  ): Promise<ContainerRegistryBlobUploadChunkResponse> {\n    return this.client.sendOperationRequest(\n      { location, value, options },\n      uploadChunkOperationSpec\n    );\n  }\n\n  /**\n   * Complete the upload, providing all the data in the body, if necessary. A request without a body will\n   * just complete the upload with previously uploaded content.\n   * @param digest Digest of a BLOB\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  completeUpload(\n    digest: string,\n    location: string,\n    options?: ContainerRegistryBlobCompleteUploadOptionalParams\n  ): Promise<ContainerRegistryBlobCompleteUploadResponse> {\n    return this.client.sendOperationRequest(\n      { digest, location, options },\n      completeUploadOperationSpec\n    );\n  }\n\n  /**\n   * Cancel outstanding upload processes, releasing associated resources. If this is not called, the\n   * unfinished uploads will eventually timeout.\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  cancelUpload(\n    location: string,\n    options?: ContainerRegistryBlobCancelUploadOptionalParams\n  ): Promise<void> {\n    return this.client.sendOperationRequest(\n      { location, options },\n      cancelUploadOperationSpec\n    );\n  }\n\n  /**\n   * Initiate a resumable blob upload with an empty request body.\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  startUpload(\n    name: string,\n    options?: ContainerRegistryBlobStartUploadOptionalParams\n  ): Promise<ContainerRegistryBlobStartUploadResponse> {\n    return this.client.sendOperationRequest(\n      { name, options },\n      startUploadOperationSpec\n    );\n  }\n\n  /**\n   * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233\n   * compliant range requests. Support can be detected by issuing a HEAD request. If the header\n   * `Accept-Range: bytes` is returned, range requests can be used to fetch partial content.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n   * @param options The options parameters.\n   */\n  getChunk(\n    name: string,\n    digest: string,\n    range: string,\n    options?: ContainerRegistryBlobGetChunkOptionalParams\n  ): Promise<ContainerRegistryBlobGetChunkResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, range, options },\n      getChunkOperationSpec\n    );\n  }\n\n  /**\n   * Same as GET, except only the headers are returned.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n   * @param options The options parameters.\n   */\n  checkChunkExists(\n    name: string,\n    digest: string,\n    range: string,\n    options?: ContainerRegistryBlobCheckChunkExistsOptionalParams\n  ): Promise<ContainerRegistryBlobCheckChunkExistsResponse> {\n    return this.client.sendOperationRequest(\n      { name, digest, range, options },\n      checkChunkExistsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getBlobOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders\n    },\n    307: {\n      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders\n    },\n    default: {}\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst checkBlobExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders\n    },\n    307: {\n      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteBlobOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerRegistryBlobDeleteBlobHeaders\n    },\n    default: {}\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept2],\n  serializer\n};\nconst mountBlobOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/uploads/\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRegistryBlobMountBlobHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  queryParameters: [Parameters.fromParam, Parameters.mount],\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getUploadStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    204: {\n      headersMapper: Mappers.ContainerRegistryBlobGetUploadStatusHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.location],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst uploadChunkOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerRegistryBlobUploadChunkHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.value3,\n  urlParameters: [Parameters.url, Parameters.location],\n  headerParameters: [Parameters.contentType2, Parameters.accept3],\n  mediaType: \"binary\",\n  serializer\n};\nconst completeUploadOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.ContainerRegistryBlobCompleteUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  requestBody: Parameters.value4,\n  queryParameters: [Parameters.digest2],\n  urlParameters: [Parameters.url, Parameters.location],\n  headerParameters: [Parameters.contentType2, Parameters.accept3],\n  mediaType: \"binary\",\n  serializer\n};\nconst cancelUploadOperationSpec: coreClient.OperationSpec = {\n  path: \"/{nextBlobUuidLink}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.location],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst startUploadOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/uploads/\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.ContainerRegistryBlobStartUploadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getChunkOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"GET\",\n  responses: {\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.ContainerRegistryBlobGetChunkHeaders\n    },\n    default: {}\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept2, Parameters.range],\n  serializer\n};\nconst checkChunkExistsOperationSpec: coreClient.OperationSpec = {\n  path: \"/v2/{name}/blobs/{digest}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.ContainerRegistryBlobCheckChunkExistsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.AcrErrors\n    }\n  },\n  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],\n  headerParameters: [Parameters.accept, Parameters.range],\n  serializer\n};\n"]}