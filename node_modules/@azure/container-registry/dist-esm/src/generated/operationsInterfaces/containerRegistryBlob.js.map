{"version":3,"file":"containerRegistryBlob.js","sourceRoot":"","sources":["../../../../src/generated/operationsInterfaces/containerRegistryBlob.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport {\n  ContainerRegistryBlobGetBlobOptionalParams,\n  ContainerRegistryBlobGetBlobResponse,\n  ContainerRegistryBlobCheckBlobExistsOptionalParams,\n  ContainerRegistryBlobCheckBlobExistsResponse,\n  ContainerRegistryBlobDeleteBlobOptionalParams,\n  ContainerRegistryBlobDeleteBlobResponse,\n  ContainerRegistryBlobMountBlobOptionalParams,\n  ContainerRegistryBlobMountBlobResponse,\n  ContainerRegistryBlobGetUploadStatusOptionalParams,\n  ContainerRegistryBlobGetUploadStatusResponse,\n  ContainerRegistryBlobUploadChunkOptionalParams,\n  ContainerRegistryBlobUploadChunkResponse,\n  ContainerRegistryBlobCompleteUploadOptionalParams,\n  ContainerRegistryBlobCompleteUploadResponse,\n  ContainerRegistryBlobCancelUploadOptionalParams,\n  ContainerRegistryBlobStartUploadOptionalParams,\n  ContainerRegistryBlobStartUploadResponse,\n  ContainerRegistryBlobGetChunkOptionalParams,\n  ContainerRegistryBlobGetChunkResponse,\n  ContainerRegistryBlobCheckChunkExistsOptionalParams,\n  ContainerRegistryBlobCheckChunkExistsResponse\n} from \"../models\";\n\n/** Interface representing a ContainerRegistryBlob. */\nexport interface ContainerRegistryBlob {\n  /**\n   * Retrieve the blob from the registry identified by digest.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  getBlob(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobGetBlobOptionalParams\n  ): Promise<ContainerRegistryBlobGetBlobResponse>;\n  /**\n   * Same as GET, except only the headers are returned.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  checkBlobExists(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobCheckBlobExistsOptionalParams\n  ): Promise<ContainerRegistryBlobCheckBlobExistsResponse>;\n  /**\n   * Removes an already uploaded blob.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param options The options parameters.\n   */\n  deleteBlob(\n    name: string,\n    digest: string,\n    options?: ContainerRegistryBlobDeleteBlobOptionalParams\n  ): Promise<ContainerRegistryBlobDeleteBlobResponse>;\n  /**\n   * Mount a blob identified by the `mount` parameter from another repository.\n   * @param name Name of the image (including the namespace)\n   * @param mount Digest of blob to mount from the source repository.\n   * @param fromParam Name of the source repository.\n   * @param options The options parameters.\n   */\n  mountBlob(\n    name: string,\n    mount: string,\n    fromParam: string,\n    options?: ContainerRegistryBlobMountBlobOptionalParams\n  ): Promise<ContainerRegistryBlobMountBlobResponse>;\n  /**\n   * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the\n   * current status of a resumable upload.\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  getUploadStatus(\n    location: string,\n    options?: ContainerRegistryBlobGetUploadStatusOptionalParams\n  ): Promise<ContainerRegistryBlobGetUploadStatusResponse>;\n  /**\n   * Upload a stream of data without completing the upload.\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param value Raw data of blob\n   * @param options The options parameters.\n   */\n  uploadChunk(\n    location: string,\n    value: coreRestPipeline.RequestBodyType,\n    options?: ContainerRegistryBlobUploadChunkOptionalParams\n  ): Promise<ContainerRegistryBlobUploadChunkResponse>;\n  /**\n   * Complete the upload, providing all the data in the body, if necessary. A request without a body will\n   * just complete the upload with previously uploaded content.\n   * @param digest Digest of a BLOB\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  completeUpload(\n    digest: string,\n    location: string,\n    options?: ContainerRegistryBlobCompleteUploadOptionalParams\n  ): Promise<ContainerRegistryBlobCompleteUploadResponse>;\n  /**\n   * Cancel outstanding upload processes, releasing associated resources. If this is not called, the\n   * unfinished uploads will eventually timeout.\n   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /\n   *                 (must do substring(1) )\n   * @param options The options parameters.\n   */\n  cancelUpload(\n    location: string,\n    options?: ContainerRegistryBlobCancelUploadOptionalParams\n  ): Promise<void>;\n  /**\n   * Initiate a resumable blob upload with an empty request body.\n   * @param name Name of the image (including the namespace)\n   * @param options The options parameters.\n   */\n  startUpload(\n    name: string,\n    options?: ContainerRegistryBlobStartUploadOptionalParams\n  ): Promise<ContainerRegistryBlobStartUploadResponse>;\n  /**\n   * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233\n   * compliant range requests. Support can be detected by issuing a HEAD request. If the header\n   * `Accept-Range: bytes` is returned, range requests can be used to fetch partial content.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n   * @param options The options parameters.\n   */\n  getChunk(\n    name: string,\n    digest: string,\n    range: string,\n    options?: ContainerRegistryBlobGetChunkOptionalParams\n  ): Promise<ContainerRegistryBlobGetChunkResponse>;\n  /**\n   * Same as GET, except only the headers are returned.\n   * @param name Name of the image (including the namespace)\n   * @param digest Digest of a BLOB\n   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.\n   * @param options The options parameters.\n   */\n  checkChunkExists(\n    name: string,\n    digest: string,\n    range: string,\n    options?: ContainerRegistryBlobCheckChunkExistsOptionalParams\n  ): Promise<ContainerRegistryBlobCheckChunkExistsResponse>;\n}\n"]}